[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 48,
    "kind": "file",
    "name": "src/benchmark.js",
    "content": "import Result from './result';\nimport now from './timer';\n\n\n/**\n * Class for benchmarking.\n *\n * Benchmark will execute by flow like this.\n *\n *   - before\n *   - beforeEach\n *   - fun\n *   - afterEach\n *   - after\n *\n * Each function can override with options of the constructor.\n *\n *\n * @example\n * import Benchmark from 'asyncmark';\n *\n *\n * new Benchmark({\n *     name: 'timeout',\n *     fun() {\n *         return new Promise((resolve, reject) => {\n *             setTimeout(resolve, 100);\n *         });\n *     },\n * }).run().catch(console.error);\n */\nexport default class Benchmark {\n    /**\n     * @param {Object|function} [options] - options for this benchmark or benchmarking function.\n     * @param {Number} [options.name='unnamed'] - name of this benchmark.\n     * @param {Number} [options.targetErrorRate=0.1] - wanted maximum error rate. see {@link Benchmark#targetErrorRate}.\n     * @param {Number} [options.maxNumber=10000] - maximum number of executing test. see {@link Benchmark#maxNumber}.\n     * @param {Number} [options.minNumber=30] - minimal number of executing test. see {@link Benchmark#minNumber}.\n     * @param {Number} [options.number] - the number of executing the test. see {@link Benchmark#number}.\n     * @param {function(): ?Promise} [options.before] - setup function. see {@link Benchmark#before}.\n     * @param {function(count: Number): ?Promise} [options.beforeEach] - setup function. see {@link Benchmark#beforeEach}.\n     * @param {function(): ?Promise} [options.fun] - target function for benchmarking. see {@link Benchmark#fun}.\n     * @param {function(count: Number, msec: Number): ?Promise} [options.afterEach] - teardown function. see {@link Benchmark#afterEach}.\n     * @param {function(result: Result): ?Promise} [options.after] - teardown function. see {@link Benchmark#after}.\n     */\n    constructor(options = {}) {\n        /**\n         * Name of this benchmark.\n         *\n         * @type {String}\n         */\n        this.name = options.name || 'unnamed';\n\n        /**\n         * Wanted maximum error rate.\n         * This value will be ignore if set {@link Benchmark#number}.\n         *\n         * @type {Number}\n         */\n        this.targetErrorRate = options.targetErrorRate || 0.1;\n\n        /**\n         * Maximum number of executing test.\n         * This value will be ignore if set {@link Benchmark#number}.\n         *\n         * @type {Number}\n         */\n        this.maxNumber = options.maxNumber || 10000;\n\n        /**\n         * Minimal number of executing test.\n         * This value will be ignore if set {@link Benchmark#number}.\n         *\n         * @type {Number}\n         */\n        this.minNumber = options.minNumber || 30;\n\n        /**\n         * The number of executing the test.\n         * Will decide automatically in between {@link Benchmark#minNumber} to {@link Benchmark#maxNumber} if set null.\n         *\n         * @type {Number|null}\n         */\n        this.number = options.number || null;\n\n        if (typeof options === 'function') {\n            this.fun = options;\n        } else {\n            this.before = options.before || this.before;\n            this.beforeEach = options.beforeEach || this.beforeEach;\n            this.fun = options.fun || this.fun;\n            this.afterEach = options.afterEach || this.afterEach;\n            this.after = options.after || this.after;\n        }\n    }\n\n    /**\n     * Setup before execute benchmark.\n     *\n     * At the time executing this method, `this` is the unique object for the benchmark.\n     * So you can use `this` for storing testing data like a database.\n     * Data of `this` that set in this method will discard after call {@link Benchmark#after}\n     *\n     * In default, do nothing.\n     *\n     * @return {?Promise} {@link Benchmark} will await if returns {@link Promise}. Resolved value never evaluation.\n     */\n    async before() {}\n\n    /**\n     * Setup before each tests.\n     *\n     * At the time executing this method, `this` is the unique object for the test.\n     * So you can use `this` for storing testing data.\n     * Data of `this` that set in this method will discard after call {@link Benchmark#afterEach}\n     *\n     * In default, do nothing.\n     *\n     * @param {Number} count - count of done tests in this benchmark.\n     *\n     * @return {?Promise} {@link Benchmark} will await if returns {@link Promise}. Resolved value never evaluation.\n     */\n    async beforeEach(count) {}\n\n    /**\n     * The target function for benchmarking.\n     *\n     * At the time executing this method, `this` is the unique object for the test.\n     * So you can use `this` for storing testing data.\n     * Data of `this` that set in this method will discard after call {@link Benchmark#afterEach}\n     *\n     * In default, couses error that `Error('target function is not defined')`.\n     *\n     * @abstract\n     *\n     * @return {?Promise} If returns {@link Promise}, {@link Benchmark} will measure the time it takes for the Promise to resolve. Otherwise will measure the time it to method return.\n     */\n    async fun() {\n        throw new Error('target function is not defined');\n    }\n\n    /**\n     * Teardown after each tests.\n     *\n     * At the time executing this method, `this` is the unique object for the test.\n     * So you can use `this` for storing testing data.\n     * Data of `this` that set in this method will discard after call this method.\n     *\n     * In default, do nothing.\n     *\n     * @param {Number} count - count of done tests in this benchmark.\n     * @param {Number} msec - duration of this execution.\n     *\n     * @return {?Promise} {@link Benchmark} will await if returns {@link Promise}. Resolved value never evaluation.\n     */\n    async afterEach(count, msec) {}\n\n    /**\n     * Teardown after execute benchmark.\n     *\n     * At the time executing this method, `this` is the unique object for the benchmark.\n     * So you can use `this` for storing testing data like a database.\n     * Data of `this` that set in this method will discard after call this method.\n     *\n     * In default, shows test result.\n     *\n     * @param {Result} result - result of this benchmark.\n     *\n     * @return {?Promise} {@link Benchmark} will await if returns {@link Promise}. Resolved value never evaluation.\n     */\n    async after(result) {\n        console.log(String(result.dropOutlier()));\n    }\n\n    /**\n     * Execute benchmark.\n     *\n     * @param {Object} [context={}] - the `this` for each benchmarking functions. `__proto__` will override with this instance.\n     * @param {Object} [callbacks={}] - callback functions.\n     * @param {function(count: Number, benchmark: Benchmark): ?Promise} [callbacks.beforeTest] - callback function that will be called when before executing each test.\n     * @param {function(count: Number, benchmark: Benchmark, msec: Number)} [callbacks.afterTest] - callback function that will be called when after executing each test.\n     *\n     * @return {?Promise<Result>} A result of benchmark.\n     */\n    async run(context = {}, callbacks = {}) {\n        context = Object.assign({}, context);\n        context.__proto__ = this;\n\n        await this.before.call(context);\n\n        const loopNum = this.number || this.maxNumber;\n\n        const msecs = [];\n        for (let i = 0; i < loopNum; i++) {\n            const ctx = Object.assign({}, context);\n\n            if (callbacks.beforeTest) {\n                await callbacks.beforeTest.call(ctx, i, this);\n            }\n\n            await this.beforeEach.call(ctx, i);\n\n            const start = now();\n            await this.fun.call(ctx);\n            const end = now();\n\n            const msec = end - start;\n            msecs.push(msec);\n\n            await this.afterEach.call(ctx, i, msec);\n\n            if (callbacks.afterTest) {\n                await callbacks.afterTest.call(ctx, i, this, msec);\n            }\n\n            if (!this.number && i + 1 >= this.minNumber && (new Result(this.name, msecs)).errorRate <= this.targetErrorRate) {\n                break;\n            }\n        }\n\n        const result = new Result(this.name, msecs);\n        await this.after.call(context, result);\n        return result;\n    }\n}\n",
    "static": true,
    "longname": "/mnt/tmpfs/asyncmark/src/benchmark.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "class",
    "name": "Benchmark",
    "memberof": "src/benchmark.js",
    "static": true,
    "longname": "src/benchmark.js~Benchmark",
    "access": "public",
    "export": true,
    "importPath": "asyncmark/dist/asyncmark.mjs",
    "importStyle": "Benchmark",
    "description": "Class for benchmarking.\n\nBenchmark will execute by flow like this.\n\n  - before\n  - beforeEach\n  - fun\n  - afterEach\n  - after\n\nEach function can override with options of the constructor.",
    "examples": [
      "import Benchmark from 'asyncmark';\n\n\nnew Benchmark({\n    name: 'timeout',\n    fun() {\n        return new Promise((resolve, reject) => {\n            setTimeout(resolve, 100);\n        });\n    },\n}).run().catch(console.error);"
    ],
    "lineNumber": 32,
    "interface": false
  },
  {
    "__docId__": 50,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/benchmark.js~Benchmark",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/benchmark.js~Benchmark#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 46,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object",
          "function"
        ],
        "spread": false,
        "optional": true,
        "name": "options",
        "description": "options for this benchmark or benchmarking function."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'unnamed'",
        "defaultRaw": "'unnamed'",
        "name": "options.name",
        "description": "name of this benchmark."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "0.1",
        "defaultRaw": 0.1,
        "name": "options.targetErrorRate",
        "description": "wanted maximum error rate. see {@link Benchmark#targetErrorRate}."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "10000",
        "defaultRaw": 10000,
        "name": "options.maxNumber",
        "description": "maximum number of executing test. see {@link Benchmark#maxNumber}."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "30",
        "defaultRaw": 30,
        "name": "options.minNumber",
        "description": "minimal number of executing test. see {@link Benchmark#minNumber}."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "name": "options.number",
        "description": "the number of executing the test. see {@link Benchmark#number}."
      },
      {
        "nullable": null,
        "types": [
          "function(): ?Promise"
        ],
        "spread": false,
        "optional": true,
        "name": "options.before",
        "description": "setup function. see {@link Benchmark#before}."
      },
      {
        "nullable": null,
        "types": [
          "function(count: Number): ?Promise"
        ],
        "spread": false,
        "optional": true,
        "name": "options.beforeEach",
        "description": "setup function. see {@link Benchmark#beforeEach}."
      },
      {
        "nullable": null,
        "types": [
          "function(): ?Promise"
        ],
        "spread": false,
        "optional": true,
        "name": "options.fun",
        "description": "target function for benchmarking. see {@link Benchmark#fun}."
      },
      {
        "nullable": null,
        "types": [
          "function(count: Number, msec: Number): ?Promise"
        ],
        "spread": false,
        "optional": true,
        "name": "options.afterEach",
        "description": "teardown function. see {@link Benchmark#afterEach}."
      },
      {
        "nullable": null,
        "types": [
          "function(result: Result): ?Promise"
        ],
        "spread": false,
        "optional": true,
        "name": "options.after",
        "description": "teardown function. see {@link Benchmark#after}."
      }
    ]
  },
  {
    "__docId__": 51,
    "kind": "member",
    "name": "name",
    "memberof": "src/benchmark.js~Benchmark",
    "static": false,
    "longname": "src/benchmark.js~Benchmark#name",
    "access": "public",
    "description": "Name of this benchmark.",
    "lineNumber": 52,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 52,
    "kind": "member",
    "name": "targetErrorRate",
    "memberof": "src/benchmark.js~Benchmark",
    "static": false,
    "longname": "src/benchmark.js~Benchmark#targetErrorRate",
    "access": "public",
    "description": "Wanted maximum error rate.\nThis value will be ignore if set {@link Benchmark#number}.",
    "lineNumber": 60,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 53,
    "kind": "member",
    "name": "maxNumber",
    "memberof": "src/benchmark.js~Benchmark",
    "static": false,
    "longname": "src/benchmark.js~Benchmark#maxNumber",
    "access": "public",
    "description": "Maximum number of executing test.\nThis value will be ignore if set {@link Benchmark#number}.",
    "lineNumber": 68,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 54,
    "kind": "member",
    "name": "minNumber",
    "memberof": "src/benchmark.js~Benchmark",
    "static": false,
    "longname": "src/benchmark.js~Benchmark#minNumber",
    "access": "public",
    "description": "Minimal number of executing test.\nThis value will be ignore if set {@link Benchmark#number}.",
    "lineNumber": 76,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 55,
    "kind": "member",
    "name": "number",
    "memberof": "src/benchmark.js~Benchmark",
    "static": false,
    "longname": "src/benchmark.js~Benchmark#number",
    "access": "public",
    "description": "The number of executing the test.\nWill decide automatically in between {@link Benchmark#minNumber} to {@link Benchmark#maxNumber} if set null.",
    "lineNumber": 84,
    "type": {
      "nullable": null,
      "types": [
        "Number",
        "null"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "before",
    "memberof": "src/benchmark.js~Benchmark",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/benchmark.js~Benchmark#before",
    "access": "public",
    "description": "Setup before execute benchmark.\n\nAt the time executing this method, `this` is the unique object for the benchmark.\nSo you can use `this` for storing testing data like a database.\nData of `this` that set in this method will discard after call {@link Benchmark#after}\n\nIn default, do nothing.",
    "lineNumber": 108,
    "return": {
      "nullable": true,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "{@link Benchmark} will await if returns {@link Promise}. Resolved value never evaluation."
    },
    "params": []
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "beforeEach",
    "memberof": "src/benchmark.js~Benchmark",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/benchmark.js~Benchmark#beforeEach",
    "access": "public",
    "description": "Setup before each tests.\n\nAt the time executing this method, `this` is the unique object for the test.\nSo you can use `this` for storing testing data.\nData of `this` that set in this method will discard after call {@link Benchmark#afterEach}\n\nIn default, do nothing.",
    "lineNumber": 123,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "count",
        "description": "count of done tests in this benchmark."
      }
    ],
    "return": {
      "nullable": true,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "{@link Benchmark} will await if returns {@link Promise}. Resolved value never evaluation."
    }
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "fun",
    "memberof": "src/benchmark.js~Benchmark",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/benchmark.js~Benchmark#fun",
    "access": "public",
    "description": "The target function for benchmarking.\n\nAt the time executing this method, `this` is the unique object for the test.\nSo you can use `this` for storing testing data.\nData of `this` that set in this method will discard after call {@link Benchmark#afterEach}\n\nIn default, couses error that `Error('target function is not defined')`.",
    "lineNumber": 138,
    "return": {
      "nullable": true,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "If returns {@link Promise}, {@link Benchmark} will measure the time it takes for the Promise to resolve. Otherwise will measure the time it to method return."
    },
    "abstract": true,
    "params": []
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "afterEach",
    "memberof": "src/benchmark.js~Benchmark",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/benchmark.js~Benchmark#afterEach",
    "access": "public",
    "description": "Teardown after each tests.\n\nAt the time executing this method, `this` is the unique object for the test.\nSo you can use `this` for storing testing data.\nData of `this` that set in this method will discard after call this method.\n\nIn default, do nothing.",
    "lineNumber": 156,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "count",
        "description": "count of done tests in this benchmark."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "msec",
        "description": "duration of this execution."
      }
    ],
    "return": {
      "nullable": true,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "{@link Benchmark} will await if returns {@link Promise}. Resolved value never evaluation."
    }
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "after",
    "memberof": "src/benchmark.js~Benchmark",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/benchmark.js~Benchmark#after",
    "access": "public",
    "description": "Teardown after execute benchmark.\n\nAt the time executing this method, `this` is the unique object for the benchmark.\nSo you can use `this` for storing testing data like a database.\nData of `this` that set in this method will discard after call this method.\n\nIn default, shows test result.",
    "lineNumber": 171,
    "params": [
      {
        "nullable": null,
        "types": [
          "Result"
        ],
        "spread": false,
        "optional": false,
        "name": "result",
        "description": "result of this benchmark."
      }
    ],
    "return": {
      "nullable": true,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "{@link Benchmark} will await if returns {@link Promise}. Resolved value never evaluation."
    }
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "run",
    "memberof": "src/benchmark.js~Benchmark",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/benchmark.js~Benchmark#run",
    "access": "public",
    "description": "Execute benchmark.",
    "lineNumber": 185,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "context",
        "description": "the `this` for each benchmarking functions. `__proto__` will override with this instance."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "callbacks",
        "description": "callback functions."
      },
      {
        "nullable": null,
        "types": [
          "function(count: Number, benchmark: Benchmark): ?Promise"
        ],
        "spread": false,
        "optional": true,
        "name": "callbacks.beforeTest",
        "description": "callback function that will be called when before executing each test."
      },
      {
        "nullable": null,
        "types": [
          "function(count: Number, benchmark: Benchmark, msec: Number)"
        ],
        "spread": false,
        "optional": true,
        "name": "callbacks.afterTest",
        "description": "callback function that will be called when after executing each test."
      }
    ],
    "return": {
      "nullable": true,
      "types": [
        "Promise<Result>"
      ],
      "spread": false,
      "description": "A result of benchmark."
    }
  },
  {
    "__docId__": 68,
    "kind": "file",
    "name": "src/index.js",
    "content": "export {default as Result} from './result';\n\nexport {default as Benchmark} from './benchmark';\nexport {default as default} from './benchmark';\n\nexport {default as Suite} from './suite';\n",
    "static": true,
    "longname": "/mnt/tmpfs/asyncmark/src/index.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 69,
    "kind": "file",
    "name": "src/result.js",
    "content": "/**\n * The result of benchmark.\n *\n * This value will included outlier. Please use {@link Result#dropOutlier} if you want drop they.\n */\nexport default class Result {\n    /**\n     * @param {String} name - name of benchmark.\n     * @param {Number[]} msecs - times of benchmark result.\n     *\n     * @ignore\n     */\n    constructor(name, msecs) {\n        /**\n         * Name of this test.\n         *\n         * @type {String}\n         */\n        this.name = name;\n\n        /**\n         * Times of benchmark result in milliseconds.\n         *\n         * @type {Number[]}\n         */\n        this.msecs = msecs;\n    }\n\n    /**\n     * Total milliseconds of this benchmark.\n     *\n     * @type {Number}\n     */\n    get total() {\n        return this.msecs.reduce((x, y) => x + y);\n    }\n\n    /**\n     * The time of fastest test in milliseconds.\n     *\n     * @type {Number}\n     */\n    get fastest() {\n        return this.msecs.reduce((x, y) => Math.min(x, y));\n    }\n\n    /**\n     * The time of slowest test in milliseconds.\n     *\n     * @type {Number}\n     */\n    get slowest() {\n        return this.msecs.reduce((x, y) => Math.max(x, y));\n    }\n\n    /**\n     * Average time of this benchmark in milliseconds.\n     *\n     * @type {Number}\n     */\n    get average() {\n        return this.total / this.msecs.length;\n    }\n\n    /**\n     * Time unbiased sample variance of times.\n     *\n     * @type {Number}\n     */\n    get variance() {\n        const avg = this.average;\n        return this.msecs.map(x => Math.pow(x - avg, 2)).reduce((x, y) => x + y) / (this.msecs.length - 1);\n    }\n\n    /**\n     * Standard division of times.\n     *\n     * @type {Number}\n     */\n    get std() {\n        return Math.sqrt(this.variance);\n    }\n\n    /**\n     * Standard error of the mean of times.\n     *\n     * @type {Number}\n     */\n    get sem() {\n        return this.std / Math.sqrt(this.msecs.length);\n    }\n\n    /**\n     * Guessed error range of this benchmark.\n     *\n     * @type {Number}\n     */\n    get errorRange() {\n        return this.sem * 1.96;\n    }\n\n    /**\n     * Error range per average time.\n     *\n     * @type {Number}\n     */\n    get errorRate() {\n        return this.errorRange / this.average;\n    }\n\n    /**\n     * Operations per seconds.\n     *\n     * @type {Number}\n     */\n    get opsPerSec() {\n        return 1000 / this.average;\n    }\n\n    /**\n     * Make new Result that droped outlier.\n     *\n     * @param {Number} [threshold=2] the threshold of outlier testing.\n     *\n     * @return {Result} new {@link Result} instance.\n     */\n    dropOutlier(threshold=2) {\n        const avg = this.average;\n        const std = this.std;\n        return new Result(this.name, this.msecs.filter(x => Math.abs((x - avg) / std) <= threshold));\n    }\n\n    /**\n     * Convert to string for printing.\n     *\n     * @return {String} human redable string\n     */\n    toString() {\n        const avg = Math.round(this.average * 10000) / 10000;\n        const ops = Math.round(this.opsPerSec * 1000) / 1000;\n        const range = Math.round(this.errorRange * 10000) / 10000;\n        const rate = Math.round(this.errorRate * 10000) / 100;\n        return `${this.name}:\\t${ops}ops/sec\\t${avg}msec/op\\t+-${range}msec/op (${rate}%)\\t${this.msecs.length} times tried`;\n    }\n}\n",
    "static": true,
    "longname": "/mnt/tmpfs/asyncmark/src/result.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 70,
    "kind": "class",
    "name": "Result",
    "memberof": "src/result.js",
    "static": true,
    "longname": "src/result.js~Result",
    "access": "public",
    "export": true,
    "importPath": "asyncmark/dist/asyncmark.mjs",
    "importStyle": "Result",
    "description": "The result of benchmark.\n\nThis value will included outlier. Please use {@link Result#dropOutlier} if you want drop they.",
    "lineNumber": 6,
    "interface": false
  },
  {
    "__docId__": 71,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/result.js~Result",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/result.js~Result#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 13,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "String"
        ],
        "spread": false,
        "optional": false,
        "name": "name",
        "description": "name of benchmark."
      },
      {
        "nullable": null,
        "types": [
          "Number[]"
        ],
        "spread": false,
        "optional": false,
        "name": "msecs",
        "description": "times of benchmark result."
      }
    ]
  },
  {
    "__docId__": 72,
    "kind": "member",
    "name": "name",
    "memberof": "src/result.js~Result",
    "static": false,
    "longname": "src/result.js~Result#name",
    "access": "public",
    "description": "Name of this test.",
    "lineNumber": 19,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 73,
    "kind": "member",
    "name": "msecs",
    "memberof": "src/result.js~Result",
    "static": false,
    "longname": "src/result.js~Result#msecs",
    "access": "public",
    "description": "Times of benchmark result in milliseconds.",
    "lineNumber": 26,
    "type": {
      "nullable": null,
      "types": [
        "Number[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 74,
    "kind": "get",
    "name": "total",
    "memberof": "src/result.js~Result",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/result.js~Result#total",
    "access": "public",
    "description": "Total milliseconds of this benchmark.",
    "lineNumber": 34,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 75,
    "kind": "get",
    "name": "fastest",
    "memberof": "src/result.js~Result",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/result.js~Result#fastest",
    "access": "public",
    "description": "The time of fastest test in milliseconds.",
    "lineNumber": 43,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 76,
    "kind": "get",
    "name": "slowest",
    "memberof": "src/result.js~Result",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/result.js~Result#slowest",
    "access": "public",
    "description": "The time of slowest test in milliseconds.",
    "lineNumber": 52,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 77,
    "kind": "get",
    "name": "average",
    "memberof": "src/result.js~Result",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/result.js~Result#average",
    "access": "public",
    "description": "Average time of this benchmark in milliseconds.",
    "lineNumber": 61,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 78,
    "kind": "get",
    "name": "variance",
    "memberof": "src/result.js~Result",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/result.js~Result#variance",
    "access": "public",
    "description": "Time unbiased sample variance of times.",
    "lineNumber": 70,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 79,
    "kind": "get",
    "name": "std",
    "memberof": "src/result.js~Result",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/result.js~Result#std",
    "access": "public",
    "description": "Standard division of times.",
    "lineNumber": 80,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 80,
    "kind": "get",
    "name": "sem",
    "memberof": "src/result.js~Result",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/result.js~Result#sem",
    "access": "public",
    "description": "Standard error of the mean of times.",
    "lineNumber": 89,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 81,
    "kind": "get",
    "name": "errorRange",
    "memberof": "src/result.js~Result",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/result.js~Result#errorRange",
    "access": "public",
    "description": "Guessed error range of this benchmark.",
    "lineNumber": 98,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 82,
    "kind": "get",
    "name": "errorRate",
    "memberof": "src/result.js~Result",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/result.js~Result#errorRate",
    "access": "public",
    "description": "Error range per average time.",
    "lineNumber": 107,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 83,
    "kind": "get",
    "name": "opsPerSec",
    "memberof": "src/result.js~Result",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/result.js~Result#opsPerSec",
    "access": "public",
    "description": "Operations per seconds.",
    "lineNumber": 116,
    "type": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 84,
    "kind": "method",
    "name": "dropOutlier",
    "memberof": "src/result.js~Result",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/result.js~Result#dropOutlier",
    "access": "public",
    "description": "Make new Result that droped outlier.",
    "lineNumber": 127,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "2",
        "defaultRaw": 2,
        "name": "threshold",
        "description": "the threshold of outlier testing."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Result"
      ],
      "spread": false,
      "description": "new {@link Result} instance."
    }
  },
  {
    "__docId__": 85,
    "kind": "method",
    "name": "toString",
    "memberof": "src/result.js~Result",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/result.js~Result#toString",
    "access": "public",
    "description": "Convert to string for printing.",
    "lineNumber": 138,
    "return": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": "human redable string"
    },
    "params": []
  },
  {
    "__docId__": 86,
    "kind": "file",
    "name": "src/suite.js",
    "content": "import Benchmark from './benchmark';\n\n\n/**\n * A set of {@link Benchmark}s for executing those sequential or parallel.\n *\n * Suite will execute by flow like this.\n *\n *   - {@link Suite#before}\n *   - {@link Suite#beforeEach}\n *   - {@link Benchmark#before}\n *   - {@link Suite#beforeTest}\n *   - {@link Benchmark#beforeEach}\n *   - {@link Benchmark#fun}\n *   - {@link Benchmark#afterEach}\n *   - {@link Suite#afterTest}\n *   - {@link Benchmark#after}\n *   - {@link Suite#afterEach}\n *   - {@link Suite#after}\n *\n * Each function can override with options of the constructor.\n *\n *\n * @example\n * import {Suite} from 'asyncmark';\n *\n *\n * const suite = new Suite({\n *     name: 'ways to find a character',\n *     beforeEach() {\n *         this.text = 'hello world';\n *     },\n *     parallel: true,\n * });\n *\n * suite.add(function() {\n *     /o/.test(this.text);\n * });\n *\n * suite.add({\n *     name: 'String#indexOf',\n *     before() {\n *         console.log('starting String#indexOf...');\n *     },\n *     fun() {\n *         this.text.indexOf('o') > -1;\n *     },\n * });\n *\n * suite.add(new Benchmark({\n *     name: 'String#match',\n *     fun() {\n *         Boolean(this.text.match(/o/));\n *     },\n *     after(result) {\n *         console.log('String#match is done! ' + result);\n *     },\n * }));\n *\n * suite.run()\n *     .then(results => {\n *         let min = results[0];\n *         results.forEach(x => {\n *             if (min.average > x.average) {\n *                 min = x;\n *             }\n *         });\n *         console.log(min.name + ' is best way!');\n *     }).\n *     catch(err => console.error(err));\n */\nexport default class Suite {\n    /**\n     * @param {Object} [options={}] - options for this suite.\n     * @param {Number} [options.name='unnamed'] - name of this suite.\n     * @param {Boolean} [options.parallel=false] - flag for executing each benchmark parallelly.\n     * @param {function(): ?Promise} [options.before] - setup function. see {@link Suite#before}.\n     * @param {function(count: Number, benchmark: Benchmark): ?Promise} [options.beforeEach] - setup function. see {@link Suite#beforeEach}.\n     * @param {function(suiteCount: Number, benchCount: Number, benchmark: Benchmark): ?Promise} [options.beforeTest] - setup function. see {@link Suite#beforeTest}.\n     * @param {function(suiteCount: Number, benchCount: Number, benchmark: Benchmark, msec: Number): ?Promise} [options.afterTest] - teardown function. see {@link Suite#afterTest}.\n     * @param {function(count: Number, benchmark: Benchmark, result: Result): ?Promise} [options.afterEach] - teardown function. see {@link Suite#afterEach}.\n     * @param {function(results: Result[]): ?Promise} [options.after] - teardown function. see {@link Suite#after}.\n     * @param {Object} [options.benchmarkDefault={}] - default options for {@link Suite#add}.\n     */\n    constructor(options = {}) {\n        /**\n         * Name of this suite.\n         *\n         * @type {String}\n         */\n        this.name = options.name || 'unnamed';\n\n        /**\n         * Default options for benchmarks in this suite.\n         *\n         * @type {Object}\n         */\n        this.benchmarkDefault = options.benchmarkDefault || {};\n\n        /**\n         * A list of {@link Benchmark}.\n         *\n         * @type {Benchmark[]}\n         */\n        this.benchmarks = [];\n\n        /**\n         * Flag for executing each benchmark parallelly.\n         *\n         * @type {Boolean}\n         */\n        this.parallel = options.parallel || false;\n\n        this.before = options.before || this.before;\n        this.beforeEach = options.beforeEach || this.beforeEach;\n        this.beforeTest = options.beforeTest || this.beforeTest;\n        this.afterTest = options.afterTest || this.afterTest;\n        this.afterEach = options.afterEach || this.afterEach;\n        this.after = options.after || this.after;\n    }\n\n    /**\n     * Setup before execute all benchmarks.\n     *\n     * At the time executing this method, `this` is the unique object for the suite.\n     * So you can use `this` for storing testing data like a database.\n     * Data of `this` that set in this method will discard after call {@link Suite#after}.\n     *\n     * In default, do nothing.\n     *\n     * @return {?Promise} {@link Suite} will await if returns {@link Promise}. Resolved value never evaluation.\n     */\n    async before() {}\n\n    /**\n     * Setup before execute each benchmark.\n     *\n     * At the time executing this method, `this` is the unique object for the benchmark.\n     * So you can use `this` for storing testing data like a database.\n     * Data of `this` that set in this method will discard after call {@link Suite#afterEach}.\n     *\n     * In default, do nothing.\n     *\n     * @param {Number} count - count of done benchmarks in this suite.\n     * @param {Benchmark} benchmark - a {@link Benchmark} instance that will execute.\n     *\n     * @return {?Promise} {@link Suite} will await if returns {@link Promise}. Resolved value never evaluation.\n     */\n    async beforeEach(count, benchmark) {}\n\n    /**\n     * Setup before execute each test of benchmarks.\n     *\n     * At the time executing this method, `this` is the unique object for the test.\n     * So you can use `this` for storing testing data like a database.\n     * Data of `this` that set in this method will discard after call {@link Suite#afterTest}.\n     *\n     * In default, do nothing.\n     *\n     * @param {Number} suiteCount - count of done benchmarks in this suite.\n     * @param {Number} benchCount - count of done tests in this benchmark.\n     * @param {Benchmark} benchmark - a {@link Benchmark} instance that will execute.\n     *\n     * @return {?Promise} {@link Suite} will await if returns {@link Promise}. Resolved value never evaluation.\n     */\n    async beforeTest(suiteCount, benchCount, benchmark) {}\n\n    /**\n     * Teardown after execute each test of benchmarks.\n     *\n     * At the time executing this method, `this` is the unique object for the test.\n     * So you can use `this` for storing testing data like a database.\n     * Data of `this` that set in this method will discard after call this method\n     *\n     * In default, do nothing.\n     *\n     * @param {Number} suiteCount - count of done benchmarks in this suite.\n     * @param {Number} benchCount - count of done tests in this benchmark.\n     * @param {Benchmark} benchmark - a {@link Benchmark} instance that executed.\n     * @param {Number} msec - a result of this test.\n     *\n     * @return {?Promise} {@link Suite} will await if returns {@link Promise}. Resolved value never evaluation.\n     */\n    async afterTest(suiteCount, benchCount, benchmark, msec) {}\n\n    /**\n     * Teardown after execute each benchmark.\n     *\n     * At the time executing this method, `this` is the unique object for the benchmark.\n     * So you can use `this` for storing testing data like a database.\n     * Data of `this` that set in this method will discard after call this method.\n     *\n     * In default, do nothing.\n     *\n     * @param {Number} count - count of done benchmarks in this suite.\n     * @param {Benchmark} benchmark - a {@link Benchmark} instance that executed.\n     * @param {Result} result - a result of this benchmark.\n     *\n     * @return {?Promise} {@link Suite} will await if returns {@link Promise}. Resolved value never evaluation.\n     */\n    async afterEach(count, benchmark, result) {}\n\n    /**\n     * Teardown after execute all benchmarks.\n     *\n     * At the time executing this method, `this` is the unique object for the suite.\n     * So you can use `this` for storing testing data like a database.\n     * Data of `this` that set in this method will discard after call this method.\n     *\n     * In default, do nothing.\n     *\n     * @param {Result[]} results - a list of benchmark result.\n     *\n     * @return {?Promise} {@link Suite} will await if returns {@link Promise}. Resolved value never evaluation.\n     */\n    async after(results) {}\n\n    /**\n     * Adding {@link Benchmark} instance into this {@link Suite}.\n     *\n     * @param {Benchmark} benchmark - the benchmark instance for adding.\n     *\n     * @return {Suite} returns this suite for method chain.\n     */\n    addBenchmark(benchmark) {\n        this.benchmarks.push(benchmark);\n        return this;\n    }\n\n    /**\n     * Adding child {@link Suite} instance into this {@link Suite}.\n     *\n     * @param {Suite} suite - the suite instance for adding.\n     *\n     * @return {Suite} returns this suite for method chain.\n     */\n    addSuite(suite) {\n        this.benchmarks.push(suite);\n        return this;\n    }\n\n    /**\n     * Make new benchmark or suite and adding into this {@link Suite}.\n     *\n     * @param {Benchmark|Suite|Object|function} child - {@link Benchmark}, {@link Suite}, or arguments for {@link Benchmark#constructor}.\n     *\n     * @return {Suite} returns this suite for method chain.\n     */\n    add(child) {\n        if (child instanceof Benchmark) {\n            this.addBenchmark(child);\n        } else if (child instanceof Suite) {\n            this.addSuite(child);\n        } else if (typeof child === 'function') {\n            const options = {fun: child};\n            options.__proto__ = this.benchmarkDefault;\n            this.addBenchmark(new Benchmark(options));\n        } else {\n            const options = Object.assign({}, child);\n            options.__proto__ = this.benchmarkDefault;\n            this.addBenchmark(new Benchmark(options));\n        }\n        return this;\n    }\n\n    /**\n     * Make callbacks for {@link Benchmark#run}.\n     *\n     * @param {Number} count - count of benchmark in this suite.\n     * @param {Object} parentCallbacks - callback functions of parent suite. same as callbacks of {@link Suite#run}.\n     *\n     * @return {Object} callbacks.\n     *\n     * @ignore\n     */\n    _makeCallbacks(count, parentCallbacks) {\n        const that = this;\n\n        return {\n            beforeTest(c, b) {\n                if (parentCallbacks.beforeTest) {\n                    parentCallbacks.beforeTest.call(this, c, b);\n                }\n                that.beforeTest.call(this, count, c, b);\n            },\n            afterTest(c, b, r) {\n                that.afterTest.call(this, count, c, b, r);\n                if (parentCallbacks.afterTest) {\n                    parentCallbacks.afterTest.call(this, c, b, r);\n                }\n            },\n        };\n    }\n\n    /**\n     * Execute benchmarks parallelly.\n     *\n     * @param {Object} context - the context for execute.\n     * @param {Object} callbacks - callback functions. same as callbacks of {@link Suite#run}.\n     *\n     * @return {Promise<Result[]>} result of benchmarks.\n     *\n     * @ignore\n     */\n    async _runParallel(context, callbacks) {\n        await this.before.call(context);\n\n        const results = await Promise.all(this.benchmarks.map(async (x, i) => {\n            const ctx = Object.assign({}, context);\n\n            await this.beforeEach.call(ctx, i, x);\n            const result = await x.run(ctx, this._makeCallbacks(i, callbacks));\n            await this.afterEach.call(ctx, i, x, result);\n            return result;\n        }));\n\n        await this.after.call(context, results);\n\n        return results;\n    }\n\n    /**\n     * Execute benchmarks sequential.\n     *\n     * @param {Object} context - the context for execute.\n     * @param {Object} callbacks - callback functions. same as callbacks of {@link Suite#run}.\n     *\n     * @return {Promise<Result[]>} result of benchmarks.\n     *\n     * @ignore\n     */\n    async _runSequential(context, callbacks) {\n        await this.before.call(context);\n\n        const results = [];\n        for (let i=0; i<this.benchmarks.length; i++) {\n            const b = this.benchmarks[i];\n            const ctx = Object.assign({}, context);\n            await this.beforeEach.call(ctx, i, b);\n            const result = await b.run(ctx, this._makeCallbacks(i, callbacks));\n            results.push(result);\n            await this.afterEach.call(ctx, i, b, result);\n        }\n\n        await this.after.call(context, results);\n\n        return results;\n    }\n\n    /**\n     * Execute benchmarks in this suite.\n     *\n     * All benchmarks will execute parallel if enabled {@link Suite#parallel} option.\n     * Else do execute sequentially by added order.\n     *\n     * @param {Object} [context={}] - the `this` for each benchmarking functions. `__proto__` will override with this instance.\n     * @param {Object} [callbacks={}] - callback functions.\n     * @param {function(count: Number, benchmark: Benchmark): ?Promise} [callbacks.beforeTest] - callback function that will be called when before executing each test.\n     * @param {function(count: Number, benchmark: Benchmark, msec: Number)} [callbacks.afterTest] - callback function that will be called when after executing each test.\n     *\n     * @return {Promise<Result[]>} An array of {@link Result}s.\n     */\n    async run(context = {}, callbacks = {}) {\n        context = Object.assign({}, context);\n        context.__proto__ = this;\n\n        if (this.parallel) {\n            return await this._runParallel(context, callbacks);\n        } else {\n            return await this._runSequential(context, callbacks);\n        }\n    }\n}\n",
    "static": true,
    "longname": "/mnt/tmpfs/asyncmark/src/suite.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 87,
    "kind": "class",
    "name": "Suite",
    "memberof": "src/suite.js",
    "static": true,
    "longname": "src/suite.js~Suite",
    "access": "public",
    "export": true,
    "importPath": "asyncmark/dist/asyncmark.mjs",
    "importStyle": "Suite",
    "description": "A set of {@link Benchmark}s for executing those sequential or parallel.\n\nSuite will execute by flow like this.\n\n  - {@link Suite#before}\n  - {@link Suite#beforeEach}\n  - {@link Benchmark#before}\n  - {@link Suite#beforeTest}\n  - {@link Benchmark#beforeEach}\n  - {@link Benchmark#fun}\n  - {@link Benchmark#afterEach}\n  - {@link Suite#afterTest}\n  - {@link Benchmark#after}\n  - {@link Suite#afterEach}\n  - {@link Suite#after}\n\nEach function can override with options of the constructor.",
    "examples": [
      "import {Suite} from 'asyncmark';\n\n\nconst suite = new Suite({\n    name: 'ways to find a character',\n    beforeEach() {\n        this.text = 'hello world';\n    },\n    parallel: true,\n});\n\nsuite.add(function() {\n    /o/.test(this.text);\n});\n\nsuite.add({\n    name: 'String#indexOf',\n    before() {\n        console.log('starting String#indexOf...');\n    },\n    fun() {\n        this.text.indexOf('o') > -1;\n    },\n});\n\nsuite.add(new Benchmark({\n    name: 'String#match',\n    fun() {\n        Boolean(this.text.match(/o/));\n    },\n    after(result) {\n        console.log('String#match is done! ' + result);\n    },\n}));\n\nsuite.run()\n    .then(results => {\n        let min = results[0];\n        results.forEach(x => {\n            if (min.average > x.average) {\n                min = x;\n            }\n        });\n        console.log(min.name + ' is best way!');\n    }).\n    catch(err => console.error(err));"
    ],
    "lineNumber": 72,
    "interface": false
  },
  {
    "__docId__": 88,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/suite.js~Suite",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/suite.js~Suite#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 85,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options",
        "description": "options for this suite."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'unnamed'",
        "defaultRaw": "'unnamed'",
        "name": "options.name",
        "description": "name of this suite."
      },
      {
        "nullable": null,
        "types": [
          "Boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "options.parallel",
        "description": "flag for executing each benchmark parallelly."
      },
      {
        "nullable": null,
        "types": [
          "function(): ?Promise"
        ],
        "spread": false,
        "optional": true,
        "name": "options.before",
        "description": "setup function. see {@link Suite#before}."
      },
      {
        "nullable": null,
        "types": [
          "function(count: Number, benchmark: Benchmark): ?Promise"
        ],
        "spread": false,
        "optional": true,
        "name": "options.beforeEach",
        "description": "setup function. see {@link Suite#beforeEach}."
      },
      {
        "nullable": null,
        "types": [
          "function(suiteCount: Number, benchCount: Number, benchmark: Benchmark): ?Promise"
        ],
        "spread": false,
        "optional": true,
        "name": "options.beforeTest",
        "description": "setup function. see {@link Suite#beforeTest}."
      },
      {
        "nullable": null,
        "types": [
          "function(suiteCount: Number, benchCount: Number, benchmark: Benchmark, msec: Number): ?Promise"
        ],
        "spread": false,
        "optional": true,
        "name": "options.afterTest",
        "description": "teardown function. see {@link Suite#afterTest}."
      },
      {
        "nullable": null,
        "types": [
          "function(count: Number, benchmark: Benchmark, result: Result): ?Promise"
        ],
        "spread": false,
        "optional": true,
        "name": "options.afterEach",
        "description": "teardown function. see {@link Suite#afterEach}."
      },
      {
        "nullable": null,
        "types": [
          "function(results: Result[]): ?Promise"
        ],
        "spread": false,
        "optional": true,
        "name": "options.after",
        "description": "teardown function. see {@link Suite#after}."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "options.benchmarkDefault",
        "description": "default options for {@link Suite#add}."
      }
    ]
  },
  {
    "__docId__": 89,
    "kind": "member",
    "name": "name",
    "memberof": "src/suite.js~Suite",
    "static": false,
    "longname": "src/suite.js~Suite#name",
    "access": "public",
    "description": "Name of this suite.",
    "lineNumber": 91,
    "type": {
      "nullable": null,
      "types": [
        "String"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 90,
    "kind": "member",
    "name": "benchmarkDefault",
    "memberof": "src/suite.js~Suite",
    "static": false,
    "longname": "src/suite.js~Suite#benchmarkDefault",
    "access": "public",
    "description": "Default options for benchmarks in this suite.",
    "lineNumber": 98,
    "type": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 91,
    "kind": "member",
    "name": "benchmarks",
    "memberof": "src/suite.js~Suite",
    "static": false,
    "longname": "src/suite.js~Suite#benchmarks",
    "access": "public",
    "description": "A list of {@link Benchmark}.",
    "lineNumber": 105,
    "type": {
      "nullable": null,
      "types": [
        "Benchmark[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 92,
    "kind": "member",
    "name": "parallel",
    "memberof": "src/suite.js~Suite",
    "static": false,
    "longname": "src/suite.js~Suite#parallel",
    "access": "public",
    "description": "Flag for executing each benchmark parallelly.",
    "lineNumber": 112,
    "type": {
      "nullable": null,
      "types": [
        "Boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 99,
    "kind": "method",
    "name": "before",
    "memberof": "src/suite.js~Suite",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/suite.js~Suite#before",
    "access": "public",
    "description": "Setup before execute all benchmarks.\n\nAt the time executing this method, `this` is the unique object for the suite.\nSo you can use `this` for storing testing data like a database.\nData of `this` that set in this method will discard after call {@link Suite#after}.\n\nIn default, do nothing.",
    "lineNumber": 133,
    "return": {
      "nullable": true,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "{@link Suite} will await if returns {@link Promise}. Resolved value never evaluation."
    },
    "params": []
  },
  {
    "__docId__": 100,
    "kind": "method",
    "name": "beforeEach",
    "memberof": "src/suite.js~Suite",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/suite.js~Suite#beforeEach",
    "access": "public",
    "description": "Setup before execute each benchmark.\n\nAt the time executing this method, `this` is the unique object for the benchmark.\nSo you can use `this` for storing testing data like a database.\nData of `this` that set in this method will discard after call {@link Suite#afterEach}.\n\nIn default, do nothing.",
    "lineNumber": 149,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "count",
        "description": "count of done benchmarks in this suite."
      },
      {
        "nullable": null,
        "types": [
          "Benchmark"
        ],
        "spread": false,
        "optional": false,
        "name": "benchmark",
        "description": "a {@link Benchmark} instance that will execute."
      }
    ],
    "return": {
      "nullable": true,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "{@link Suite} will await if returns {@link Promise}. Resolved value never evaluation."
    }
  },
  {
    "__docId__": 101,
    "kind": "method",
    "name": "beforeTest",
    "memberof": "src/suite.js~Suite",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/suite.js~Suite#beforeTest",
    "access": "public",
    "description": "Setup before execute each test of benchmarks.\n\nAt the time executing this method, `this` is the unique object for the test.\nSo you can use `this` for storing testing data like a database.\nData of `this` that set in this method will discard after call {@link Suite#afterTest}.\n\nIn default, do nothing.",
    "lineNumber": 166,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "suiteCount",
        "description": "count of done benchmarks in this suite."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "benchCount",
        "description": "count of done tests in this benchmark."
      },
      {
        "nullable": null,
        "types": [
          "Benchmark"
        ],
        "spread": false,
        "optional": false,
        "name": "benchmark",
        "description": "a {@link Benchmark} instance that will execute."
      }
    ],
    "return": {
      "nullable": true,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "{@link Suite} will await if returns {@link Promise}. Resolved value never evaluation."
    }
  },
  {
    "__docId__": 102,
    "kind": "method",
    "name": "afterTest",
    "memberof": "src/suite.js~Suite",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/suite.js~Suite#afterTest",
    "access": "public",
    "description": "Teardown after execute each test of benchmarks.\n\nAt the time executing this method, `this` is the unique object for the test.\nSo you can use `this` for storing testing data like a database.\nData of `this` that set in this method will discard after call this method\n\nIn default, do nothing.",
    "lineNumber": 184,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "suiteCount",
        "description": "count of done benchmarks in this suite."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "benchCount",
        "description": "count of done tests in this benchmark."
      },
      {
        "nullable": null,
        "types": [
          "Benchmark"
        ],
        "spread": false,
        "optional": false,
        "name": "benchmark",
        "description": "a {@link Benchmark} instance that executed."
      },
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "msec",
        "description": "a result of this test."
      }
    ],
    "return": {
      "nullable": true,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "{@link Suite} will await if returns {@link Promise}. Resolved value never evaluation."
    }
  },
  {
    "__docId__": 103,
    "kind": "method",
    "name": "afterEach",
    "memberof": "src/suite.js~Suite",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/suite.js~Suite#afterEach",
    "access": "public",
    "description": "Teardown after execute each benchmark.\n\nAt the time executing this method, `this` is the unique object for the benchmark.\nSo you can use `this` for storing testing data like a database.\nData of `this` that set in this method will discard after call this method.\n\nIn default, do nothing.",
    "lineNumber": 201,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "count",
        "description": "count of done benchmarks in this suite."
      },
      {
        "nullable": null,
        "types": [
          "Benchmark"
        ],
        "spread": false,
        "optional": false,
        "name": "benchmark",
        "description": "a {@link Benchmark} instance that executed."
      },
      {
        "nullable": null,
        "types": [
          "Result"
        ],
        "spread": false,
        "optional": false,
        "name": "result",
        "description": "a result of this benchmark."
      }
    ],
    "return": {
      "nullable": true,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "{@link Suite} will await if returns {@link Promise}. Resolved value never evaluation."
    }
  },
  {
    "__docId__": 104,
    "kind": "method",
    "name": "after",
    "memberof": "src/suite.js~Suite",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/suite.js~Suite#after",
    "access": "public",
    "description": "Teardown after execute all benchmarks.\n\nAt the time executing this method, `this` is the unique object for the suite.\nSo you can use `this` for storing testing data like a database.\nData of `this` that set in this method will discard after call this method.\n\nIn default, do nothing.",
    "lineNumber": 216,
    "params": [
      {
        "nullable": null,
        "types": [
          "Result[]"
        ],
        "spread": false,
        "optional": false,
        "name": "results",
        "description": "a list of benchmark result."
      }
    ],
    "return": {
      "nullable": true,
      "types": [
        "Promise"
      ],
      "spread": false,
      "description": "{@link Suite} will await if returns {@link Promise}. Resolved value never evaluation."
    }
  },
  {
    "__docId__": 105,
    "kind": "method",
    "name": "addBenchmark",
    "memberof": "src/suite.js~Suite",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/suite.js~Suite#addBenchmark",
    "access": "public",
    "description": "Adding {@link Benchmark} instance into this {@link Suite}.",
    "lineNumber": 225,
    "params": [
      {
        "nullable": null,
        "types": [
          "Benchmark"
        ],
        "spread": false,
        "optional": false,
        "name": "benchmark",
        "description": "the benchmark instance for adding."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Suite"
      ],
      "spread": false,
      "description": "returns this suite for method chain."
    }
  },
  {
    "__docId__": 106,
    "kind": "method",
    "name": "addSuite",
    "memberof": "src/suite.js~Suite",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/suite.js~Suite#addSuite",
    "access": "public",
    "description": "Adding child {@link Suite} instance into this {@link Suite}.",
    "lineNumber": 237,
    "params": [
      {
        "nullable": null,
        "types": [
          "Suite"
        ],
        "spread": false,
        "optional": false,
        "name": "suite",
        "description": "the suite instance for adding."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Suite"
      ],
      "spread": false,
      "description": "returns this suite for method chain."
    }
  },
  {
    "__docId__": 107,
    "kind": "method",
    "name": "add",
    "memberof": "src/suite.js~Suite",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/suite.js~Suite#add",
    "access": "public",
    "description": "Make new benchmark or suite and adding into this {@link Suite}.",
    "lineNumber": 249,
    "params": [
      {
        "nullable": null,
        "types": [
          "Benchmark",
          "Suite",
          "Object",
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "child",
        "description": "{@link Benchmark}, {@link Suite}, or arguments for {@link Benchmark#constructor}."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Suite"
      ],
      "spread": false,
      "description": "returns this suite for method chain."
    }
  },
  {
    "__docId__": 108,
    "kind": "method",
    "name": "_makeCallbacks",
    "memberof": "src/suite.js~Suite",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/suite.js~Suite#_makeCallbacks",
    "access": "private",
    "description": "Make callbacks for {@link Benchmark#run}.",
    "lineNumber": 276,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "Number"
        ],
        "spread": false,
        "optional": false,
        "name": "count",
        "description": "count of benchmark in this suite."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "parentCallbacks",
        "description": "callback functions of parent suite. same as callbacks of {@link Suite#run}."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object"
      ],
      "spread": false,
      "description": "callbacks."
    }
  },
  {
    "__docId__": 109,
    "kind": "method",
    "name": "_runParallel",
    "memberof": "src/suite.js~Suite",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/suite.js~Suite#_runParallel",
    "access": "private",
    "description": "Execute benchmarks parallelly.",
    "lineNumber": 305,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": "the context for execute."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "callbacks",
        "description": "callback functions. same as callbacks of {@link Suite#run}."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Result[]>"
      ],
      "spread": false,
      "description": "result of benchmarks."
    }
  },
  {
    "__docId__": 110,
    "kind": "method",
    "name": "_runSequential",
    "memberof": "src/suite.js~Suite",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/suite.js~Suite#_runSequential",
    "access": "private",
    "description": "Execute benchmarks sequential.",
    "lineNumber": 332,
    "ignore": true,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "context",
        "description": "the context for execute."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "callbacks",
        "description": "callback functions. same as callbacks of {@link Suite#run}."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Result[]>"
      ],
      "spread": false,
      "description": "result of benchmarks."
    }
  },
  {
    "__docId__": 111,
    "kind": "method",
    "name": "run",
    "memberof": "src/suite.js~Suite",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/suite.js~Suite#run",
    "access": "public",
    "description": "Execute benchmarks in this suite.\n\nAll benchmarks will execute parallel if enabled {@link Suite#parallel} option.\nElse do execute sequentially by added order.",
    "lineNumber": 363,
    "params": [
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "context",
        "description": "the `this` for each benchmarking functions. `__proto__` will override with this instance."
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "{}",
        "defaultRaw": {},
        "name": "callbacks",
        "description": "callback functions."
      },
      {
        "nullable": null,
        "types": [
          "function(count: Number, benchmark: Benchmark): ?Promise"
        ],
        "spread": false,
        "optional": true,
        "name": "callbacks.beforeTest",
        "description": "callback function that will be called when before executing each test."
      },
      {
        "nullable": null,
        "types": [
          "function(count: Number, benchmark: Benchmark, msec: Number)"
        ],
        "spread": false,
        "optional": true,
        "name": "callbacks.afterTest",
        "description": "callback function that will be called when after executing each test."
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Promise<Result[]>"
      ],
      "spread": false,
      "description": "An array of {@link Result}s."
    }
  },
  {
    "__docId__": 112,
    "kind": "file",
    "name": "src/timer.js",
    "content": "/**\n * milliseconds timer\n *\n * @return {Number} high resolution current time in milliseconds.\n *\n * @ignore\n */\nlet now = function() {\n    return Number(new Date());\n};\n\nif (typeof performance !== 'undefined' && performance.now) {\n    now = function() {\n        return performance.now();\n    };\n} else {\n    try {\n        const microtime = require('microtime');\n        now = function() {\n            return microtime.nowDouble() * 1000;\n        };\n    } catch(e) {\n        if (typeof process !== 'undefined' && process.hrtime) {\n            now = function() {\n                const hr = process.hrtime();\n                return (hr[0] * 1e9 + hr[1]) / 1e6;\n            };\n        }\n    }\n}\n\n\nexport default now;\n",
    "static": true,
    "longname": "/mnt/tmpfs/asyncmark/src/timer.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 113,
    "kind": "function",
    "name": "now",
    "memberof": "src/timer.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/timer.js~now",
    "access": "public",
    "export": true,
    "importPath": "asyncmark/dist/asyncmark.mjs",
    "importStyle": "now",
    "description": "milliseconds timer",
    "lineNumber": 8,
    "ignore": true,
    "return": {
      "nullable": null,
      "types": [
        "Number"
      ],
      "spread": false,
      "description": "high resolution current time in milliseconds."
    },
    "params": []
  },
  {
    "kind": "index",
    "content": "AsyncMark\n=========\n\nA benchmarking library for javascript that supports Promise.\n\n[![NPM](https://nodei.co/npm/asyncmark.png)](https://nodei.co/npm/asyncmark/)\n\n[![Build Status](https://travis-ci.org/macrat/AsyncMark.svg?branch=master)](https://travis-ci.org/macrat/AsyncMark)\n[![Test Coverage](https://api.codeclimate.com/v1/badges/cd3cd1561b170ca42584/test_coverage)](https://codeclimate.com/github/macrat/AsyncMark/test_coverage)\n[![Maintainability](https://api.codeclimate.com/v1/badges/cd3cd1561b170ca42584/maintainability)](https://codeclimate.com/github/macrat/AsyncMark/maintainability)\n[![devDependencies Status](https://david-dm.org/macrat/asyncmark/dev-status.svg)](https://david-dm.org/macrat/asyncmark?type=dev)\n[![optionalDependencies Status](https://david-dm.org/macrat/asyncmark/optional-status.svg)](https://david-dm.org/macrat/asyncmark?type=optional)\n[![license](https://img.shields.io/github/license/macrat/AsyncMark.svg)](https://github.com/macrat/AsyncMark/blob/master/LICENSE)\n[![document](https://macrat.github.io/AsyncMark/badge.svg)](https://macrat.github.io/AsyncMark/)\n\nYou can [try benchmark on the web](https://macrat.github.io/AsyncMark/on-web/index.html).\n\n## be simple\n``` javascript\nimport Benchmark from 'asyncmark';\n\n\nnew Benchmark(function() {\n    return new Promise((resolve, reject) => {\n        setTimeout(resolve, 100);\n    });\n}).run().catch(console.error);\n```\n\n## be customizable\n``` javascript\nimport {Suite} from 'asyncmark';\n\n\nconst suite = new Suite({\n    name: 'ways to find a character',\n    beforeEach() {\n        this.text = 'hello world';\n    },\n    parallel: true,\n});\n\nsuite.add(function() {\n    /o/.test(this.text);\n});\n\nsuite.add({\n    name: 'String#indexOf',\n    before() {\n        console.log('starting String#indexOf...');\n    },\n    fun() {\n        this.text.indexOf('o') > -1;\n    },\n});\n\nsuite.add(new Benchmark({\n    name: 'String#match',\n    fun() {\n        Boolean(this.text.match(/o/));\n    },\n    after(result) {\n        console.log('String#match is done! ' + result);\n    },\n}));\n\nsuite.run()\n    .then(results => {\n        let min = results[0];\n        results.forEach(x => {\n            if (min.average > x.average) {\n                min = x;\n            }\n        });\n        console.log(min.name + ' is best way!');\n    }).\n    catch(err => console.error(err));\n```\n\n## installation\n### Node.js\n``` shell\n$ npm install asyncmark\n```\n\n#### ES6\n``` javascript\nimport Benchmark, {Suite} from 'asyncmark';\n```\n\n#### CommonJS\n``` javascript\nconst AsyncMark = require('asyncmark');\n\nconst Benchmark = AsyncMark.Benchmark;\nconst Suite = AsyncMark.Suite;\n```\n\n### Browser\n``` html\n<script src=\"https://unpkg.com/asyncmark\"></script>\n<script>\nconst Benchmark = AsyncMark.Benchmark;\nconst Suite = AsyncMark.Suite;\n</script>\n```\n",
    "longname": "/mnt/tmpfs/asyncmark/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"asyncmark\",\n  \"version\": \"0.2.2\",\n  \"description\": \"A benchmarking library that supports Promise.\",\n  \"main\": \"dist/asyncmark\",\n  \"unpkg\": \"dist/asyncmark.min.js\",\n  \"files\": [\n    \"README.md\",\n    \"LICESNSE\",\n    \"dist\"\n  ],\n  \"scripts\": {\n    \"test\": \"npm run test:eslint && npm run test:mocha\",\n    \"test:eslint\": \"./node_modules/.bin/eslint src/*.js examples/*.js build.js && ./node_modules/.bin/eslint --global describe,it test/*.js\",\n    \"test:mocha\": \"NODE_ENV=development ./node_modules/.bin/nyc --require babel-core/register --reporter lcov --reporter text ./node_modules/.bin/mocha\",\n    \"build\": \"npm run build:dist && npm run build:docs\",\n    \"build:dist\": \"NODE_ENV=production node build.js\",\n    \"build:docs\": \"NODE_ENV=production ./node_modules/.bin/esdoc\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/macrat/AsyncMark.git\"\n  },\n  \"keywords\": [\n    \"benchmark\",\n    \"benchmarking\",\n    \"promise\",\n    \"asynchronous\",\n    \"async\"\n  ],\n  \"author\": \"MacRat <m@crat.jp> (https://blanktar.jp)\",\n  \"license\": \"MIT\",\n  \"bugs\": \"https://github.com/macrat/AsyncMark/issues\",\n  \"homepage\": \"https://macrat.github.io/AsyncMark/\",\n  \"devDependencies\": {\n    \"babel-core\": \"^6.26.3\",\n    \"babel-plugin-transform-runtime\": \"^6.23.0\",\n    \"babel-preset-env\": \"^1.7.0\",\n    \"babel-preset-power-assert\": \"^2.0.0\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-importpath-plugin\": \"^1.0.2\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^5.2.0\",\n    \"mocha\": \"^5.2.0\",\n    \"nyc\": \"^12.0.2\",\n    \"power-assert\": \"^1.6.0\",\n    \"rollup\": \"^0.63.4\",\n    \"rollup-plugin-babel\": \"^3.0.7\"\n  },\n  \"optionalDependencies\": {\n    \"microtime\": \"^2.1.8\"\n  },\n  \"runkitExample\": \"const AsyncMark = require('asyncmark');\\n\\nnew AsyncMark.Benchmark(function() {\\n    return new Promise((resolve, reject) => {\\n        setTimeout(resolve, 100);\\n    });\\n}).run().catch(console.error);\\n\",\n  \"esdoc\": {\n    \"source\": \"./src\",\n    \"destination\": \"./docs\",\n    \"plugins\": [\n      {\n        \"name\": \"esdoc-standard-plugin\",\n        \"option\": {\n          \"test\": {\n            \"source\": \"./test/\",\n            \"includes\": [\n              \".*\\\\.js$\"\n            ]\n          }\n        }\n      },\n      {\n        \"name\": \"esdoc-importpath-plugin\",\n        \"option\": {\n          \"replaces\": [\n            {\n              \"from\": \"^.*$\",\n              \"to\": \"dist/asyncmark.mjs\"\n            }\n          ]\n        }\n      }\n    ]\n  },\n  \"babel\": {\n    \"env\": {\n      \"development\": {\n        \"presets\": [\n          \"env\",\n          \"power-assert\"\n        ],\n        \"plugins\": [\n          \"transform-runtime\"\n        ]\n      }\n    }\n  },\n  \"eslintConfig\": {\n    \"extends\": \"eslint:recommended\",\n    \"rules\": {\n      \"arrow-body-style\": [\n        \"warn\",\n        \"as-needed\"\n      ],\n      \"arrow-parens\": [\n        \"warn\",\n        \"as-needed\"\n      ],\n      \"eqeqeq\": \"error\",\n      \"indent\": [\n        \"error\",\n        4\n      ],\n      \"init-declarations\": [\n        \"error\",\n        \"always\"\n      ],\n      \"no-catch-shadow\": \"warn\",\n      \"no-console\": \"off\",\n      \"no-floating-decimal\": \"error\",\n      \"no-implicit-coercion\": \"error\",\n      \"no-label-var\": \"error\",\n      \"no-self-compare\": \"error\",\n      \"no-shadow\": \"error\",\n      \"no-template-curly-in-string\": \"warn\",\n      \"no-throw-literal\": \"error\",\n      \"no-unused-vars\": \"off\",\n      \"no-var\": \"error\",\n      \"prefer-const\": \"warn\",\n      \"prefer-promise-reject-errors\": \"error\",\n      \"quotes\": [\n        \"warn\",\n        \"single\"\n      ],\n      \"space-before-blocks\": [\n        \"warn\",\n        {\n          \"functions\": \"always\",\n          \"keywords\": \"always\",\n          \"classes\": \"always\"\n        }\n      ],\n      \"valid-jsdoc\": \"warn\",\n      \"yoda\": \"warn\"\n    },\n    \"env\": {\n      \"browser\": true,\n      \"es6\": true,\n      \"node\": true\n    },\n    \"parserOptions\": {\n      \"ecmaVersion\": 2017,\n      \"sourceType\": \"module\"\n    }\n  },\n  \"dependencies\": {\n    \"rollup-plugin-terser\": \"^1.0.1\"\n  }\n}\n",
    "longname": "/mnt/tmpfs/asyncmark/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 114,
    "kind": "testFile",
    "name": "test/benchmark.js",
    "content": "import assert from 'power-assert';\n\nimport Benchmark, {Benchmark as Bench2, Result} from '../src';\n\n\n/**\n * @test {Benchmark}\n */\ndescribe('Benchmark', function() {\n    it('module exports', function() {\n        assert(Benchmark === Bench2);\n    });\n\n    /**\n     * @test {Benchmark#constructor}\n     */\n    describe('#constructor', function() {\n        it('default values', function() {\n            const b = new Benchmark();\n\n            assert(b.name === 'unnamed');\n            assert(b.targetErrorRate === 0.1);\n            assert(b.maxNumber === 10000);\n            assert(b.minNumber === 30);\n            assert(b.number === null);\n        });\n\n        it('function argument', function() {\n            let called = false;\n            const f = function() {\n                called = true;\n            }\n            const b = new Benchmark(f);\n\n            assert(b.fun === f);\n\n            assert(called === false);\n            b.fun();\n            assert(called === true);\n        });\n\n        describe('object argument', function() {\n            it('with auto number', function() {\n                const conf = {\n                    name: 'test name',\n                    targetErrorRate: 0.2,\n                    maxNumber: 100,\n                    minNumber: 10,\n                };\n                const b = new Benchmark(conf);\n\n                assert(b.name === conf.name);\n                assert(b.targetErrorRate === conf.targetErrorRate);\n                assert(b.maxNumber === conf.maxNumber);\n                assert(b.minNumber === conf.minNumber);\n            });\n\n            it('with specify number', function() {\n                const conf = {\n                    name: 'test name',\n                    number: 42,\n                };\n                const b = new Benchmark(conf);\n\n                assert(b.name === conf.name);\n                assert(b.number === conf.number);\n            });\n\n            it('functions', function() {\n                const called = {\n                    before: false,\n                    beforeEach: false,\n                    fun: false,\n                    afterEach: false,\n                    after: false,\n                };\n                const conf = {\n                    name: 'test name',\n                    number: 42,\n                    before() {\n                        called.before = true;\n                    },\n                    beforeEach() {\n                        called.beforeEach = true;\n                    },\n                    fun() {\n                        called.fun = true;\n                    },\n                    afterEach() {\n                        called.afterEach = true;\n                    },\n                    after() {\n                        called.after = true;\n                    },\n                };\n                const b = new Benchmark(conf);\n\n                assert(b.name === conf.name);\n                assert(b.number === conf.number);\n\n                assert(called.before === false);\n                b.before();\n                assert(called.before === true);\n\n                assert(called.beforeEach === false);\n                b.beforeEach();\n                assert(called.beforeEach === true);\n\n                assert(called.fun === false);\n                b.fun();\n                assert(called.fun === true);\n\n                assert(called.afterEach === false);\n                b.afterEach();\n                assert(called.afterEach === true);\n\n                assert(called.after === false);\n                b.after();\n                assert(called.after === true);\n            });\n        });\n    });\n\n    /**\n     * @test {Benchmark#fun}\n     */\n    describe('#fun', function() {\n        it('default behavior', async function() {\n            const b = new Benchmark();\n\n            const err = await b.fun().then(() => null).catch(e => e);\n            assert(err !== null, 'excepted error but not throwed');\n            assert(err.message === 'target function is not defined');\n        });\n    });\n\n    /**\n     * @test {Benchmark#after}\n     */\n    describe('#after', function() {\n        it('default behavior', async function() {\n            const l = console.log;\n            const messages = [];\n            console.log = function() {\n                messages.push([...arguments].map(x => String(x)).join(' '));\n            }\n\n            try {\n                const b = new Benchmark();\n                const r = new Result('after_test', [1, 2, 3, 4, 5, 100])\n\n                await b.after(r);\n\n                assert.deepStrictEqual(messages, [new Result('after_test', [1, 2, 3, 4, 5]).toString()]);\n            } finally {\n                console.log = l;\n            }\n        });\n    });\n\n    /**\n     * @test {Benchmark#run}\n     */\n    describe('#run', function() {\n        it('call methods order', async function() {\n            const callLog = [];\n\n            const conf = {\n                number: 2,\n                before() { callLog.push('before'); },\n                beforeEach() { callLog.push('beforeEach'); },\n                fun() { callLog.push('fun'); },\n                afterEach() { callLog.push('afterEach'); },\n                after() { callLog.push('after'); },\n            };\n            const b = new Benchmark(conf);\n\n            const l = console.log;\n            const messages = [];\n            console.log = function() {\n                messages.push([...arguments].map(x => String(x)).join(' '));\n            }\n\n            try {\n                await b.run();\n\n                assert.deepStrictEqual(callLog, [\n                    'before',\n                    'beforeEach',\n                    'fun',\n                    'afterEach',\n                    'beforeEach',\n                    'fun',\n                    'afterEach',\n                    'after',\n                ]);\n                assert.deepStrictEqual(messages, []);\n            } finally {\n                console.log = l;\n            }\n        });\n\n        it('call methods order (with callbacks)', async function() {\n            const callLog = [];\n\n            const conf = {\n                number: 2,\n                before() { callLog.push('before'); },\n                beforeEach() { callLog.push('beforeEach'); },\n                fun() { callLog.push('fun'); },\n                afterEach() { callLog.push('afterEach'); },\n                after() { callLog.push('after'); },\n            };\n            const b = new Benchmark(conf);\n\n            const l = console.log;\n            const messages = [];\n            console.log = function() {\n                messages.push([...arguments].map(x => String(x)).join(' '));\n            }\n\n            try {\n                await b.run({}, {\n                    beforeTest() { callLog.push('beforeTest'); },\n                    afterTest() { callLog.push('afterTest'); },\n                });\n\n                assert.deepStrictEqual(callLog, [\n                    'before',\n                    'beforeTest',\n                    'beforeEach',\n                    'fun',\n                    'afterEach',\n                    'afterTest',\n                    'beforeTest',\n                    'beforeEach',\n                    'fun',\n                    'afterEach',\n                    'afterTest',\n                    'after',\n                ]);\n                assert.deepStrictEqual(messages, []);\n            } finally {\n                console.log = l;\n            }\n        });\n\n        it('context handling', async function() {\n            const conf = {\n                number: 2,\n                before() {\n                    assert(this.inOuter === undefined);\n                    assert(this.inInner === undefined);\n                    assert(this.inFunc === undefined);\n                    assert(this.outInner === undefined);\n                    assert(this.outOuter === undefined);\n\n                    this.inOuter = 123;\n                },\n                beforeEach() {\n                    assert(this.inOuter === 123);\n                    assert(this.inInner === undefined);\n                    assert(this.inFunc === undefined);\n                    assert(this.outInner === undefined);\n                    assert(this.outOuter === undefined);\n\n                    this.inInner = 'abc';\n                },\n                fun() {\n                    assert(this.inOuter === 123);\n                    assert(this.inInner === 'abc');\n                    assert(this.inFunc === undefined);\n                    assert(this.outInner === undefined);\n                    assert(this.outOuter === undefined);\n\n                    this.inFunc = true;\n                },\n                afterEach() {\n                    assert(this.inOuter === 123);\n                    assert(this.inInner === 'abc');\n                    assert(this.inFunc === true);\n                    assert(this.outInner === undefined);\n                    assert(this.outOuter === undefined);\n\n                    this.outInner = 'cba';\n                },\n                after() {\n                    assert(this.inOuter === 123);\n                    assert(this.inInner === undefined);\n                    assert(this.inFunc === undefined);\n                    assert(this.outInner === undefined);\n                    assert(this.outOuter === undefined);\n\n                    this.outOuter = 321;\n                },\n            };\n            const b = new Benchmark(conf);\n\n            const l = console.log;\n            const messages = [];\n            console.log = function() {\n                messages.push([...arguments].map(x => String(x)).join(' '));\n            }\n\n            try {\n                await b.run({}, {\n                    beforeTest() {\n                        assert(this.inOuter === 123);\n                        assert(this.inInner === undefined);\n                        assert(this.inFunc === undefined);\n                        assert(this.outInner === undefined);\n                        assert(this.outOuter === undefined);\n                    },\n                    afterTest() {\n                        assert(this.inOuter === 123);\n                        assert(this.inInner === 'abc');\n                        assert(this.inFunc === true);\n                        assert(this.outInner === 'cba');\n                        assert(this.outOuter === undefined);\n                    },\n                });\n                assert.deepStrictEqual(messages, []);\n            } finally {\n                console.log = l;\n            }\n        });\n\n        it('arguments for methods', async function() {\n            const beforeCounts = [];\n            const afterCounts = [];\n\n            const b = new Benchmark({\n                number: 2,\n                before() {\n                    assert(arguments.length === 0);\n                },\n                beforeEach(count) {\n                    assert(arguments.length === 1);\n\n                    assert(typeof count === 'number');\n                    beforeCounts.push(count);\n                },\n                fun() {\n                    assert(arguments.length === 0);\n                },\n                afterEach(count, msec) {\n                    assert(arguments.length === 2);\n\n                    assert(typeof msec === 'number');\n                    assert(msec < 1);\n\n                    assert(typeof count === 'number');\n                    afterCounts.push(count);\n                },\n                after(result) {\n                    assert(arguments.length === 1);\n\n                    assert(result instanceof Result);\n                    assert(result.msecs.length === 2)\n                },\n            });\n\n            const result = await b.run({}, {\n                beforeTest(count, bench) {\n                    assert(typeof count === 'number');\n                    assert(bench instanceof Benchmark);\n                },\n                afterTest(count, bench, msec) {\n                    assert(typeof count === 'number');\n                    assert(bench instanceof Benchmark);\n                    assert(typeof msec === 'number');\n                    assert(msec < 1);\n                },\n            });\n            assert(result instanceof Result);\n            assert(result.msecs.length === 2);\n\n            assert.deepStrictEqual(beforeCounts, [0, 1]);\n            assert.deepStrictEqual(afterCounts, [0, 1]);\n        });\n\n        describe('loop and time', function() {\n            it('static number', async function() {\n                const r100 = await new Benchmark({\n                    number: 3,\n                    fun() {\n                        return new Promise((resolve, reject) => setTimeout(resolve, 100));\n                    },\n                    after() {}\n                }).run();\n                assert(Math.abs(r100.average - 100) <= 3);\n\n                const r42 = await new Benchmark({\n                    number: 3,\n                    fun() {\n                        return new Promise((resolve, reject) => setTimeout(resolve, 42));\n                    },\n                    after() {}\n                }).run();\n                assert(Math.abs(r42.average - 42) <= 3);\n            });\n\n            it('auto / rate 20%', async function() {\n                const r = await new Benchmark({\n                    minNumber: 5,\n                    maxNumber: 100,\n                    targetErrorRate: 0.2,\n                    fun() {\n                        return new Promise((resolve, reject) => setTimeout(resolve, 49 + Math.random() * 2));\n                    },\n                    after() {},\n                }).run();\n\n                assert(r.msecs.length >= 5);\n                assert(r.msecs.length <= 100);\n                assert(r.errorRate <= 0.2);\n            });\n\n            it('auto / rate 40%', async function() {\n                const r = await new Benchmark({\n                    minNumber: 5,\n                    maxNumber: 100,\n                    targetErrorRate: 0.4,\n                    fun() {\n                        return new Promise((resolve, reject) => setTimeout(resolve, 49 + Math.random() * 2));\n                    },\n                    after() {},\n                }).run();\n\n                assert(r.msecs.length >= 5);\n                assert(r.msecs.length <= 100);\n                assert(r.errorRate <= 0.4);\n            });\n        });\n    });\n});\n",
    "static": true,
    "longname": "/mnt/tmpfs/asyncmark/test/benchmark.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 115,
    "kind": "test",
    "name": "describe0",
    "testId": 0,
    "memberof": "test/benchmark.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/benchmark.js~describe0",
    "access": null,
    "description": "Benchmark",
    "lineNumber": 9,
    "testTargets": [
      "Benchmark"
    ]
  },
  {
    "__docId__": 116,
    "kind": "test",
    "name": "it1",
    "testId": 1,
    "memberof": "test/benchmark.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/benchmark.js~describe0.it1",
    "access": null,
    "description": "module exports",
    "lineNumber": 10
  },
  {
    "__docId__": 117,
    "kind": "test",
    "name": "describe2",
    "testId": 2,
    "memberof": "test/benchmark.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/benchmark.js~describe0.describe2",
    "access": null,
    "description": "#constructor",
    "lineNumber": 17,
    "testTargets": [
      "Benchmark#constructor"
    ]
  },
  {
    "__docId__": 118,
    "kind": "test",
    "name": "it3",
    "testId": 3,
    "memberof": "test/benchmark.js~describe0.describe2",
    "testDepth": 2,
    "static": true,
    "longname": "test/benchmark.js~describe0.describe2.it3",
    "access": null,
    "description": "default values",
    "lineNumber": 18
  },
  {
    "__docId__": 119,
    "kind": "test",
    "name": "it4",
    "testId": 4,
    "memberof": "test/benchmark.js~describe0.describe2",
    "testDepth": 2,
    "static": true,
    "longname": "test/benchmark.js~describe0.describe2.it4",
    "access": null,
    "description": "function argument",
    "lineNumber": 28
  },
  {
    "__docId__": 120,
    "kind": "test",
    "name": "describe5",
    "testId": 5,
    "memberof": "test/benchmark.js~describe0.describe2",
    "testDepth": 2,
    "static": true,
    "longname": "test/benchmark.js~describe0.describe2.describe5",
    "access": null,
    "description": "object argument",
    "lineNumber": 42
  },
  {
    "__docId__": 121,
    "kind": "test",
    "name": "it6",
    "testId": 6,
    "memberof": "test/benchmark.js~describe0.describe2.describe5",
    "testDepth": 3,
    "static": true,
    "longname": "test/benchmark.js~describe0.describe2.describe5.it6",
    "access": null,
    "description": "with auto number",
    "lineNumber": 43
  },
  {
    "__docId__": 122,
    "kind": "test",
    "name": "it7",
    "testId": 7,
    "memberof": "test/benchmark.js~describe0.describe2.describe5",
    "testDepth": 3,
    "static": true,
    "longname": "test/benchmark.js~describe0.describe2.describe5.it7",
    "access": null,
    "description": "with specify number",
    "lineNumber": 58
  },
  {
    "__docId__": 123,
    "kind": "test",
    "name": "it8",
    "testId": 8,
    "memberof": "test/benchmark.js~describe0.describe2.describe5",
    "testDepth": 3,
    "static": true,
    "longname": "test/benchmark.js~describe0.describe2.describe5.it8",
    "access": null,
    "description": "functions",
    "lineNumber": 69
  },
  {
    "__docId__": 124,
    "kind": "test",
    "name": "describe9",
    "testId": 9,
    "memberof": "test/benchmark.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/benchmark.js~describe0.describe9",
    "access": null,
    "description": "#fun",
    "lineNumber": 127,
    "testTargets": [
      "Benchmark#fun"
    ]
  },
  {
    "__docId__": 125,
    "kind": "test",
    "name": "it10",
    "testId": 10,
    "memberof": "test/benchmark.js~describe0.describe9",
    "testDepth": 2,
    "static": true,
    "longname": "test/benchmark.js~describe0.describe9.it10",
    "access": null,
    "description": "default behavior",
    "lineNumber": 128
  },
  {
    "__docId__": 126,
    "kind": "test",
    "name": "describe11",
    "testId": 11,
    "memberof": "test/benchmark.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/benchmark.js~describe0.describe11",
    "access": null,
    "description": "#after",
    "lineNumber": 140,
    "testTargets": [
      "Benchmark#after"
    ]
  },
  {
    "__docId__": 127,
    "kind": "test",
    "name": "it12",
    "testId": 12,
    "memberof": "test/benchmark.js~describe0.describe11",
    "testDepth": 2,
    "static": true,
    "longname": "test/benchmark.js~describe0.describe11.it12",
    "access": null,
    "description": "default behavior",
    "lineNumber": 141
  },
  {
    "__docId__": 128,
    "kind": "test",
    "name": "describe13",
    "testId": 13,
    "memberof": "test/benchmark.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/benchmark.js~describe0.describe13",
    "access": null,
    "description": "#run",
    "lineNumber": 164,
    "testTargets": [
      "Benchmark#run"
    ]
  },
  {
    "__docId__": 129,
    "kind": "test",
    "name": "it14",
    "testId": 14,
    "memberof": "test/benchmark.js~describe0.describe13",
    "testDepth": 2,
    "static": true,
    "longname": "test/benchmark.js~describe0.describe13.it14",
    "access": null,
    "description": "call methods order",
    "lineNumber": 165
  },
  {
    "__docId__": 130,
    "kind": "test",
    "name": "it15",
    "testId": 15,
    "memberof": "test/benchmark.js~describe0.describe13",
    "testDepth": 2,
    "static": true,
    "longname": "test/benchmark.js~describe0.describe13.it15",
    "access": null,
    "description": "call methods order (with callbacks)",
    "lineNumber": 203
  },
  {
    "__docId__": 131,
    "kind": "test",
    "name": "it16",
    "testId": 16,
    "memberof": "test/benchmark.js~describe0.describe13",
    "testDepth": 2,
    "static": true,
    "longname": "test/benchmark.js~describe0.describe13.it16",
    "access": null,
    "description": "context handling",
    "lineNumber": 248
  },
  {
    "__docId__": 132,
    "kind": "test",
    "name": "it17",
    "testId": 17,
    "memberof": "test/benchmark.js~describe0.describe13",
    "testDepth": 2,
    "static": true,
    "longname": "test/benchmark.js~describe0.describe13.it17",
    "access": null,
    "description": "arguments for methods",
    "lineNumber": 328
  },
  {
    "__docId__": 133,
    "kind": "test",
    "name": "describe18",
    "testId": 18,
    "memberof": "test/benchmark.js~describe0.describe13",
    "testDepth": 2,
    "static": true,
    "longname": "test/benchmark.js~describe0.describe13.describe18",
    "access": null,
    "description": "loop and time",
    "lineNumber": 382
  },
  {
    "__docId__": 134,
    "kind": "test",
    "name": "it19",
    "testId": 19,
    "memberof": "test/benchmark.js~describe0.describe13.describe18",
    "testDepth": 3,
    "static": true,
    "longname": "test/benchmark.js~describe0.describe13.describe18.it19",
    "access": null,
    "description": "static number",
    "lineNumber": 383
  },
  {
    "__docId__": 135,
    "kind": "test",
    "name": "it20",
    "testId": 20,
    "memberof": "test/benchmark.js~describe0.describe13.describe18",
    "testDepth": 3,
    "static": true,
    "longname": "test/benchmark.js~describe0.describe13.describe18.it20",
    "access": null,
    "description": "auto / rate 20%",
    "lineNumber": 403
  },
  {
    "__docId__": 136,
    "kind": "test",
    "name": "it21",
    "testId": 21,
    "memberof": "test/benchmark.js~describe0.describe13.describe18",
    "testDepth": 3,
    "static": true,
    "longname": "test/benchmark.js~describe0.describe13.describe18.it21",
    "access": null,
    "description": "auto / rate 40%",
    "lineNumber": 419
  },
  {
    "__docId__": 137,
    "kind": "testFile",
    "name": "test/result.js",
    "content": "import assert from 'power-assert';\n\nimport {Result} from '../src';\n\n\n/**\n * @test {Result}\n */\ndescribe('Result', function() {\n    /**\n     * @test {Result#total}\n     */\n    it('#total', function() {\n        assert(new Result('test', [10, 20, 30]).total === 60);\n        assert(new Result('test', [11, 22, 33]).total === 66);\n    });\n\n    /**\n     * @test {Result#fastest}\n     */\n    it('#fastest', function() {\n        assert(new Result('test', [10, 20, 30]).fastest === 10);\n        assert(new Result('test', [33, 22, 11]).fastest === 11);\n    });\n\n    /**\n     * @test {Result#slowest}\n     */\n    it('#slowest', function() {\n        assert(new Result('test', [10, 20, 30]).slowest === 30);\n        assert(new Result('test', [33, 22, 11]).slowest === 33);\n    });\n\n    /**\n     * @test {Result#average}\n     */\n    it('#average', function() {\n        assert(new Result('test', [10, 20, 30]).average === 20);\n        assert(new Result('test', [11, 22, 33]).average === 22);\n    });\n\n    /**\n     * @test {Result#variance}\n     */\n    it('#variance', function() {\n        assert(new Result('test', [10, 20, 30]).variance === 100);\n        assert(new Result('test', [11, 22, 33]).variance === 121);\n    });\n\n    /**\n     * @test {Result#std}\n     */\n    it('#std', function() {\n        assert(new Result('test', [10, 20, 30]).std === 10);\n        assert(new Result('test', [11, 22, 33]).std === 11);\n    });\n\n    /**\n     * @test {Result#std}\n     */\n    it('#sem', function() {\n        assert(Math.abs(new Result('test', [10, 20, 30]).sem - 5.7735) < 0.001);\n        assert(Math.abs(new Result('test', [11, 22, 33]).sem - 6.3509) < 0.001);\n    });\n\n    /**\n     * @test {Result#errorRange}\n     */\n    it('#errorRange', function() {\n        assert(Math.abs(new Result('test', [10, 20, 30]).errorRange - 11.3161) < 0.001);\n        assert(Math.abs(new Result('test', [11, 22, 33]).errorRange - 12.4477) < 0.001);\n    });\n\n    /**\n     * @test {Result#errorRate}\n     */\n    it('#errorRate', function() {\n        assert(Math.abs(new Result('test', [10, 20, 30]).errorRate - 0.5658) < 0.001);\n        assert(Math.abs(new Result('test', [11, 22, 33]).errorRate - 0.5658) < 0.001);\n    });\n\n    /**\n     * @test {Result#opsPerSec}\n     */\n    it('#opsPerSec', function() {\n        assert(new Result('test', [1]).opsPerSec === 1000);\n        assert(new Result('test', [200]).opsPerSec === 5);\n    });\n\n    /**\n     * test {Result#dropOutlier}\n     */\n    it('#opsPerSec', function() {\n        assert.deepStrictEqual(new Result('test', [10, 20, 30]).dropOutlier().msecs, [10, 20, 30]);\n        assert.deepStrictEqual(new Result('test', [10, 11, 12, 13, 14, 15, 100]).dropOutlier().msecs, [10, 11, 12, 13, 14, 15]);\n        assert.deepStrictEqual(new Result('test', [10, 11, 12, 13, 14, 15, 100]).dropOutlier(3).msecs, [10, 11, 12, 13, 14, 15, 100]);\n    });\n\n    /**\n     * @test {Result#toString}\n     */\n    it('#toString', function() {\n        assert(String(new Result('test', [10, 20, 30])) === 'test:\\t50ops/sec\\t20msec/op\\t+-11.3161msec/op (56.58%)\\t3 times tried');\n        assert(String(new Result('test', [1.234567, 2.345678])) === 'test:\\t558.621ops/sec\\t1.7901msec/op\\t+-1.0889msec/op (60.83%)\\t2 times tried');\n    });\n});\n",
    "static": true,
    "longname": "/mnt/tmpfs/asyncmark/test/result.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 138,
    "kind": "test",
    "name": "describe22",
    "testId": 22,
    "memberof": "test/result.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/result.js~describe22",
    "access": null,
    "description": "Result",
    "lineNumber": 9,
    "testTargets": [
      "Result"
    ]
  },
  {
    "__docId__": 139,
    "kind": "test",
    "name": "it23",
    "testId": 23,
    "memberof": "test/result.js~describe22",
    "testDepth": 1,
    "static": true,
    "longname": "test/result.js~describe22.it23",
    "access": null,
    "description": "#total",
    "lineNumber": 13,
    "testTargets": [
      "Result#total"
    ]
  },
  {
    "__docId__": 140,
    "kind": "test",
    "name": "it24",
    "testId": 24,
    "memberof": "test/result.js~describe22",
    "testDepth": 1,
    "static": true,
    "longname": "test/result.js~describe22.it24",
    "access": null,
    "description": "#fastest",
    "lineNumber": 21,
    "testTargets": [
      "Result#fastest"
    ]
  },
  {
    "__docId__": 141,
    "kind": "test",
    "name": "it25",
    "testId": 25,
    "memberof": "test/result.js~describe22",
    "testDepth": 1,
    "static": true,
    "longname": "test/result.js~describe22.it25",
    "access": null,
    "description": "#slowest",
    "lineNumber": 29,
    "testTargets": [
      "Result#slowest"
    ]
  },
  {
    "__docId__": 142,
    "kind": "test",
    "name": "it26",
    "testId": 26,
    "memberof": "test/result.js~describe22",
    "testDepth": 1,
    "static": true,
    "longname": "test/result.js~describe22.it26",
    "access": null,
    "description": "#average",
    "lineNumber": 37,
    "testTargets": [
      "Result#average"
    ]
  },
  {
    "__docId__": 143,
    "kind": "test",
    "name": "it27",
    "testId": 27,
    "memberof": "test/result.js~describe22",
    "testDepth": 1,
    "static": true,
    "longname": "test/result.js~describe22.it27",
    "access": null,
    "description": "#variance",
    "lineNumber": 45,
    "testTargets": [
      "Result#variance"
    ]
  },
  {
    "__docId__": 144,
    "kind": "test",
    "name": "it28",
    "testId": 28,
    "memberof": "test/result.js~describe22",
    "testDepth": 1,
    "static": true,
    "longname": "test/result.js~describe22.it28",
    "access": null,
    "description": "#std",
    "lineNumber": 53,
    "testTargets": [
      "Result#std"
    ]
  },
  {
    "__docId__": 145,
    "kind": "test",
    "name": "it29",
    "testId": 29,
    "memberof": "test/result.js~describe22",
    "testDepth": 1,
    "static": true,
    "longname": "test/result.js~describe22.it29",
    "access": null,
    "description": "#sem",
    "lineNumber": 61,
    "testTargets": [
      "Result#std"
    ]
  },
  {
    "__docId__": 146,
    "kind": "test",
    "name": "it30",
    "testId": 30,
    "memberof": "test/result.js~describe22",
    "testDepth": 1,
    "static": true,
    "longname": "test/result.js~describe22.it30",
    "access": null,
    "description": "#errorRange",
    "lineNumber": 69,
    "testTargets": [
      "Result#errorRange"
    ]
  },
  {
    "__docId__": 147,
    "kind": "test",
    "name": "it31",
    "testId": 31,
    "memberof": "test/result.js~describe22",
    "testDepth": 1,
    "static": true,
    "longname": "test/result.js~describe22.it31",
    "access": null,
    "description": "#errorRate",
    "lineNumber": 77,
    "testTargets": [
      "Result#errorRate"
    ]
  },
  {
    "__docId__": 148,
    "kind": "test",
    "name": "it32",
    "testId": 32,
    "memberof": "test/result.js~describe22",
    "testDepth": 1,
    "static": true,
    "longname": "test/result.js~describe22.it32",
    "access": null,
    "description": "#opsPerSec",
    "lineNumber": 85,
    "testTargets": [
      "Result#opsPerSec"
    ]
  },
  {
    "__docId__": 149,
    "kind": "test",
    "name": "it33",
    "testId": 33,
    "memberof": "test/result.js~describe22",
    "testDepth": 1,
    "static": true,
    "longname": "test/result.js~describe22.it33",
    "access": null,
    "description": "test {Result#dropOutlier}",
    "lineNumber": 93
  },
  {
    "__docId__": 150,
    "kind": "test",
    "name": "it34",
    "testId": 34,
    "memberof": "test/result.js~describe22",
    "testDepth": 1,
    "static": true,
    "longname": "test/result.js~describe22.it34",
    "access": null,
    "description": "#toString",
    "lineNumber": 102,
    "testTargets": [
      "Result#toString"
    ]
  },
  {
    "__docId__": 151,
    "kind": "testFile",
    "name": "test/suite.js",
    "content": "import assert from 'power-assert';\n\nimport Benchmark, {Suite, Result} from '../src';\n\n\n/**\n * @test {Suite}\n */\ndescribe('Suite', function() {\n    describe('#constructor', function() {\n        it('default values', function() {\n            const s = new Suite();\n\n            assert(s.name === 'unnamed');\n            assert(s.parallel === false);\n            assert.deepStrictEqual(s.benchmarkDefault, {});\n        });\n\n        it('options', function() {\n            const conf = {\n                name: 'foo',\n                parallel: true,\n                benchmarkDefault: {\n                    name: 'bar',\n                },\n            };\n            const s = new Suite(conf);\n\n            assert(s.name === 'foo');\n            assert(s.parallel === true);\n            assert.deepStrictEqual(s.benchmarkDefault, {name: 'bar'});\n        });\n\n        it('functions', function() {\n            const called = {\n                before: false,\n                beforeEach: false,\n                afterEach: false,\n                after: false,\n            };\n            const s = new Suite({\n                before() {\n                    called.before = true;\n                },\n                beforeEach() {\n                    called.beforeEach = true;\n                },\n                fun() {\n                    called.fun = true;\n                },\n                afterEach() {\n                    called.afterEach = true;\n                },\n                after() {\n                    called.after = true;\n                },\n            });\n\n            assert(called.before === false);\n            s.before();\n            assert(called.before === true);\n\n            assert(called.beforeEach === false);\n            s.beforeEach();\n            assert(called.beforeEach === true);\n\n            assert(called.afterEach === false);\n            s.afterEach();\n            assert(called.afterEach === true);\n\n            assert(called.after === false);\n            s.after();\n            assert(called.after === true);\n        });\n    });\n\n    /**\n     * @test {Suite#addBenchmark}\n     */\n    it('#addBenchmark', function() {\n        const s = new Suite();\n        const b1 = new Benchmark({name: 'a'});\n        const b2 = new Benchmark({name: 'b'});\n\n        assert.deepStrictEqual(s.benchmarks, []);\n        s.addBenchmark(b1);\n        assert.deepStrictEqual(s.benchmarks, [b1]);\n        s.addBenchmark(b2);\n        assert.deepStrictEqual(s.benchmarks, [b1, b2]);\n\n        assert(s.benchmarks[0].name === 'a');\n        assert(s.benchmarks[1].name === 'b');\n    });\n\n    /**\n     * @test {Suite#addSuite}\n     */\n    it('#addSuite', function() {\n        const p = new Suite();\n        const c1 = new Suite();\n        const c2 = new Suite();\n\n        assert(p !== c1);\n        assert(p !== c2);\n        assert(c1 !== c2);\n\n        assert.deepStrictEqual(p.benchmarks, []);\n        p.addBenchmark(c1);\n        assert.deepStrictEqual(p.benchmarks, [c1]);\n        p.addBenchmark(c2);\n        assert.deepStrictEqual(p.benchmarks, [c1, c2]);\n    });\n\n    /**\n     * @test {Suite#add}\n     */\n    describe('#add', function() {\n        it('Benchmark', function() {\n            const s = new Suite();\n            const b = new Benchmark({name: 'foobar'});\n\n            assert.deepStrictEqual(s.benchmarks, []);\n            s.add(b);\n\n            assert.deepStrictEqual(s.benchmarks, [b]);\n            assert(s.benchmarks[0].name === 'foobar');\n        });\n\n        it('Suite', function() {\n            const p = new Suite();\n            const c = new Suite();\n\n            assert(p !== c);\n            assert.deepStrictEqual(p.benchmarks, []);\n\n            p.add(c);\n\n            assert.deepStrictEqual(p.benchmarks, [c]);\n            assert.deepStrictEqual(c.benchmarks, []);\n        });\n\n        it('function', async function() {\n            const called = {\n                fun: false,\n                after: false,\n            };\n            const fun = function() {\n                called.fun = true;\n            };\n            const s = new Suite({\n                benchmarkDefault: {\n                    after() {\n                        called.after = true;\n                    },\n                },\n            });\n\n            assert.deepStrictEqual(s.benchmarks, []);\n            s.add(fun);\n            assert(s.benchmarks.length === 1);\n\n            assert(called.fun === false);\n            await s.benchmarks[0].fun();\n            assert(called.fun === true);\n\n            assert(called.after === false);\n            await s.benchmarks[0].after();\n            assert(called.after === true);\n        });\n\n        it('function with override default', async function() {\n            const called = {\n                original: false,\n                overrided: false,\n            };\n            const s = new Suite({\n                benchmarkDefault: {\n                    fun() {\n                        called.original = true;\n                    },\n                },\n            });\n\n            const conf = {\n                fun() {\n                    called.overrided = true;\n                },\n            };\n\n            assert.deepStrictEqual(s.benchmarks, []);\n            s.add(conf);\n            assert(s.benchmarks.length === 1);\n\n            assert(called.original === false);\n            assert(called.overrided === false);\n            await s.benchmarks[0].fun();\n            assert(called.original === false);\n            assert(called.overrided === true);\n        });\n\n        it('object', async function() {\n            const called = {\n                fun: false,\n                after: false,\n            };\n            const s = new Suite({\n                benchmarkDefault: {\n                    after() {\n                        called.after = true;\n                    },\n                },\n            });\n\n            const conf = {\n                fun() {\n                    called.fun = true;\n                },\n            };\n\n            assert.deepStrictEqual(s.benchmarks, []);\n            s.add(conf);\n            assert(s.benchmarks.length === 1);\n\n            assert(called.fun === false);\n            await s.benchmarks[0].fun();\n            assert(called.fun === true);\n\n            assert(called.after === false);\n            await s.benchmarks[0].after();\n            assert(called.after === true);\n        });\n\n        it('object with override default', async function() {\n            const called = {\n                original: false,\n                overrided: false,\n            };\n            const s = new Suite({\n                benchmarkDefault: {\n                    after() {\n                        called.original = true;\n                    },\n                },\n            });\n\n            const conf = {\n                after() {\n                    called.overrided = true;\n                },\n            };\n\n            assert.deepStrictEqual(s.benchmarks, []);\n            s.add(conf);\n            assert(s.benchmarks.length === 1);\n\n            assert(called.original === false);\n            assert(called.overrided === false);\n            await s.benchmarks[0].after();\n            assert(called.original === false);\n            assert(called.overrided === true);\n        });\n    });\n\n    /**\n     * @test {Suite#run}\n     */\n    describe('#run', function() {\n        describe('call methods order', function() {\n            it('empty tests', async function() {\n                const callLog = [];\n\n                const s = new Suite({\n                    before() {\n                        callLog.push('before');\n                    },\n                    beforeEach() {\n                        callLog.push('beforeEach');\n                    },\n                    beforeTest() {\n                        callLog.push('beforeTest');\n                    },\n                    afterTest() {\n                        callLog.push('afterTest');\n                    },\n                    afterEach() {\n                        callLog.push('afterEach');\n                    },\n                    after() {\n                        callLog.push('after');\n                    },\n                });\n\n                assert.deepStrictEqual(callLog, []);\n\n                await s.run();\n\n                assert.deepStrictEqual(callLog, [\n                    'before',\n                    'after',\n                ]);\n            });\n\n            it('empty tests (enabled parallel)', async function() {\n                const callLog = [];\n\n                const s = new Suite({\n                    before() {\n                        callLog.push('before');\n                    },\n                    beforeEach() {\n                        callLog.push('beforeEach');\n                    },\n                    beforeTest() {\n                        callLog.push('beforeTest');\n                    },\n                    afterTest() {\n                        callLog.push('afterTest');\n                    },\n                    afterEach() {\n                        callLog.push('afterEach');\n                    },\n                    after() {\n                        callLog.push('after');\n                    },\n                    parallel: true,\n                });\n\n                assert.deepStrictEqual(callLog, []);\n\n                await s.run();\n\n                assert.deepStrictEqual(callLog, [\n                    'before',\n                    'after',\n                ]);\n            });\n\n            it('with test', async function() {\n                const callLog = [];\n\n                const s = new Suite({\n                    before() {\n                        callLog.push('before');\n                    },\n                    beforeEach() {\n                        callLog.push('beforeEach');\n                    },\n                    beforeTest() {\n                        callLog.push('beforeTest');\n                    },\n                    afterTest() {\n                        callLog.push('afterTest');\n                    },\n                    afterEach() {\n                        callLog.push('afterEach');\n                    },\n                    after() {\n                        callLog.push('after');\n                    },\n                    benchmarkDefault: {\n                        after() {},\n                    },\n                });\n\n                s.add({\n                    number: 2,\n                    fun() {\n                        callLog.push('bench1');\n                    },\n                });\n\n                s.add({\n                    number: 3,\n                    fun() {\n                        callLog.push('bench2');\n                    },\n                });\n\n                assert.deepStrictEqual(callLog, []);\n\n                await (new Suite({\n                    beforeTest() {\n                        callLog.push('beforeTest parent');\n                    },\n                    afterTest() {\n                        callLog.push('afterTest parent');\n                    },\n                })).add(s).run();\n\n                assert.deepStrictEqual(callLog, [\n                    'before',\n\n                    'beforeEach',\n\n                    'beforeTest parent',\n                    'beforeTest',\n                    'bench1',\n                    'afterTest',\n                    'afterTest parent',\n\n                    'beforeTest parent',\n                    'beforeTest',\n                    'bench1',\n                    'afterTest',\n                    'afterTest parent',\n\n                    'afterEach',\n\n                    'beforeEach',\n\n                    'beforeTest parent',\n                    'beforeTest',\n                    'bench2',\n                    'afterTest',\n                    'afterTest parent',\n\n                    'beforeTest parent',\n                    'beforeTest',\n                    'bench2',\n                    'afterTest',\n                    'afterTest parent',\n\n                    'beforeTest parent',\n                    'beforeTest',\n                    'bench2',\n                    'afterTest',\n                    'afterTest parent',\n\n                    'afterEach',\n\n                    'after',\n                ]);\n            });\n\n            it('with test (enabled parallel)', async function() {\n                const callLog = [];\n\n                const s = new Suite({\n                    before() {\n                        callLog.push('before');\n                    },\n                    beforeEach() {\n                        callLog.push('beforeEach');\n                    },\n                    beforeTest() {\n                        callLog.push('beforeTest');\n                    },\n                    afterTest() {\n                        callLog.push('afterTest');\n                    },\n                    afterEach() {\n                        callLog.push('afterEach');\n                    },\n                    after() {\n                        callLog.push('after');\n                    },\n                    benchmarkDefault: {\n                        after() {},\n                    },\n                    parallel: true,\n                });\n\n                s.add({\n                    number: 2,\n                    fun() {\n                        callLog.push('bench1');\n                    },\n                });\n\n                s.add({\n                    number: 3,\n                    fun() {\n                        callLog.push('bench2');\n                    },\n                });\n\n                assert.deepStrictEqual(callLog, []);\n\n                await s.run();\n\n                assert(callLog.length === 21);\n\n                assert(callLog[0] === 'before');\n                assert(callLog[1] === 'beforeEach');\n                assert(callLog[callLog.length - 2] === 'afterEach');\n                assert(callLog[callLog.length - 1] === 'after');\n\n                assert(callLog.filter(x => x === 'bench1').length === 2);\n                assert(callLog.filter(x => x === 'bench2').length === 3);\n                assert(callLog.filter(x => x === 'beforeEach').length === 2);\n                assert(callLog.filter(x => x === 'afterEach').length === 2);\n                assert(callLog.filter(x => x === 'beforeTest').length === 5);\n                assert(callLog.filter(x => x === 'afterTest').length === 5);\n            });\n        });\n\n        const contextTest = async function(options) {\n            options.__proto__ = {\n                before() {\n                    assert(this.inOuter === undefined);\n                    assert(this.inInner === undefined);\n                    assert(this.inBench === undefined);\n                    assert(this.outInner === undefined);\n                    assert(this.outOuter === undefined);\n\n                    this.inOuter = 123;\n                },\n                beforeEach() {\n                    assert(this.inOuter === 123);\n                    assert(this.inInner === undefined);\n                    assert(this.inBench === undefined);\n                    assert(this.outInner === undefined);\n                    assert(this.outOuter === undefined);\n\n                    this.inInner = 'abc';\n                },\n                afterEach() {\n                    assert(this.inOuter === 123);\n                    assert(this.inInner === 'abc');\n                    assert(this.inBench === undefined);\n                    assert(this.outInner === undefined);\n                    assert(this.outOuter === undefined);\n\n                    this.outInner = 'cba';\n                },\n                after() {\n                    assert(this.inOuter === 123);\n                    assert(this.inInner === undefined);\n                    assert(this.inBench === undefined);\n                    assert(this.outInner === undefined);\n                    assert(this.outOuter === undefined);\n\n                    this.outOuter = 321;\n                },\n                benchmarkDefault: {\n                    fun() {},\n                },\n            };\n\n            const s = new Suite(options);\n\n            s.add({\n                number: 2,\n                before() {\n                    assert(this.inOuter === 123);\n                    assert(this.inInner === 'abc');\n                    assert(this.inBench === undefined);\n                    assert(this.outInner === undefined);\n                    assert(this.outOuter === undefined);\n\n                    this.inBench = 42;\n                },\n                after() {\n                    assert(this.inOuter === 123);\n                    assert(this.inInner === 'abc');\n                    assert(this.inBench === 42);\n                    assert(this.outInner === undefined);\n                    assert(this.outOuter === undefined);\n                },\n            });\n\n            s.add({\n                number: 3,\n                before() {\n                    assert(this.inOuter === 123);\n                    assert(this.inInner === 'abc');\n                    assert(this.inBench === undefined);\n                    assert(this.outInner === undefined);\n                    assert(this.outOuter === undefined);\n\n                    this.inBench = 24;\n                },\n                after() {\n                    assert(this.inOuter === 123);\n                    assert(this.inInner === 'abc');\n                    assert(this.inBench === 24);\n                    assert(this.outInner === undefined);\n                    assert(this.outOuter === undefined);\n                },\n            });\n\n            await s.run();\n        };\n\n        it('context handling', function() {\n            return contextTest({parallel: false});\n        });\n\n        it('context handling (enabled parallel)', function() {\n            return contextTest({parallel: true});\n        });\n\n        const argumentsTest = async function(options) {\n            const beforeCounts = [];\n            const afterCounts = [];\n            const results = [];\n            const beforeTestCounts = [];\n            const afterTestCounts = [];\n\n            options.__proto__ = {\n                before() {\n                    assert(arguments.length === 0);\n                },\n                beforeEach(count, benchmark) {\n                    assert(arguments.length === 2);\n\n                    assert(typeof count === 'number');\n                    beforeCounts.push(count);\n\n                    assert(benchmark instanceof Benchmark);\n                },\n                beforeTest(suiteCount, benchCount, benchmark) {\n                    assert(arguments.length === 3);\n\n                    assert(typeof suiteCount === 'number');\n                    assert(typeof benchCount === 'number');\n                    assert(benchmark instanceof Benchmark);\n\n                    beforeTestCounts.push([benchmark.name, suiteCount, benchCount]);\n                },\n                afterTest(suiteCount, benchCount, benchmark, msec) {\n                    assert(arguments.length === 4);\n\n                    assert(typeof suiteCount === 'number');\n                    assert(typeof benchCount === 'number');\n                    assert(benchmark instanceof Benchmark);\n\n                    afterTestCounts.push([benchmark.name, suiteCount, benchCount]);\n\n                    assert(typeof msec === 'number');\n                    assert(msec < 1);\n                },\n                afterEach(count, benchmark, result) {\n                    assert(arguments.length === 3);\n\n                    assert(typeof count === 'number');\n                    afterCounts.push(count);\n\n                    assert(benchmark instanceof Benchmark);\n\n                    assert(result instanceof Result);\n                    results.push(result);\n                },\n                after(rs) {\n                    assert(arguments.length === 1);\n\n                    assert(rs[0].msecs.length === 2);\n                    assert(rs[1].msecs.length === 3);\n\n                    rs.forEach((x, i) => {\n                        assert(x instanceof Result);\n                        assert.deepStrictEqual(results[i].msecs, x.msecs);\n                    });\n                },\n                benchmarkDefault: {\n                    fun() {},\n                    after() {},\n                },\n            };\n\n            const s = new Suite(options);\n\n            s.add({name: 'a', number: 2});\n            s.add({name: 'b', number: 3});\n\n            const rs = await s.run();\n            assert(rs[0].msecs.length === 2);\n            assert(rs[1].msecs.length === 3);\n            rs.forEach((x, i) => {\n                assert(x instanceof Result);\n                assert.deepStrictEqual(results[i].msecs, x.msecs);\n            });\n\n            assert.deepStrictEqual(beforeCounts, [0, 1]);\n            assert.deepStrictEqual(afterCounts, [0, 1]);\n\n            beforeTestCounts.sort((x, y) => (x[1] - y[1]) * 10 + (x[2] - y[2]));\n            afterTestCounts.sort((x, y) => (x[1] - y[1]) * 10 + (x[2] - y[2]));\n            assert.deepStrictEqual(beforeTestCounts, [['a', 0, 0], ['a', 0, 1], ['b', 1, 0], ['b', 1, 1], ['b', 1, 2]]);\n            assert.deepStrictEqual(afterTestCounts,  [['a', 0, 0], ['a', 0, 1], ['b', 1, 0], ['b', 1, 1], ['b', 1, 2]]);\n        };\n\n        it('arguments for methods', function() {\n            return argumentsTest({parallel: false});\n        });\n\n        it('arguments for methods (enabled parallel)', function() {\n            return argumentsTest({parallel: true});\n        });\n    });\n});\n",
    "static": true,
    "longname": "/mnt/tmpfs/asyncmark/test/suite.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 152,
    "kind": "test",
    "name": "describe35",
    "testId": 35,
    "memberof": "test/suite.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/suite.js~describe35",
    "access": null,
    "description": "Suite",
    "lineNumber": 9,
    "testTargets": [
      "Suite"
    ]
  },
  {
    "__docId__": 153,
    "kind": "test",
    "name": "describe36",
    "testId": 36,
    "memberof": "test/suite.js~describe35",
    "testDepth": 1,
    "static": true,
    "longname": "test/suite.js~describe35.describe36",
    "access": null,
    "description": "#constructor",
    "lineNumber": 10
  },
  {
    "__docId__": 154,
    "kind": "test",
    "name": "it37",
    "testId": 37,
    "memberof": "test/suite.js~describe35.describe36",
    "testDepth": 2,
    "static": true,
    "longname": "test/suite.js~describe35.describe36.it37",
    "access": null,
    "description": "default values",
    "lineNumber": 11
  },
  {
    "__docId__": 155,
    "kind": "test",
    "name": "it38",
    "testId": 38,
    "memberof": "test/suite.js~describe35.describe36",
    "testDepth": 2,
    "static": true,
    "longname": "test/suite.js~describe35.describe36.it38",
    "access": null,
    "description": "options",
    "lineNumber": 19
  },
  {
    "__docId__": 156,
    "kind": "test",
    "name": "it39",
    "testId": 39,
    "memberof": "test/suite.js~describe35.describe36",
    "testDepth": 2,
    "static": true,
    "longname": "test/suite.js~describe35.describe36.it39",
    "access": null,
    "description": "functions",
    "lineNumber": 34
  },
  {
    "__docId__": 157,
    "kind": "test",
    "name": "it40",
    "testId": 40,
    "memberof": "test/suite.js~describe35",
    "testDepth": 1,
    "static": true,
    "longname": "test/suite.js~describe35.it40",
    "access": null,
    "description": "#addBenchmark",
    "lineNumber": 80,
    "testTargets": [
      "Suite#addBenchmark"
    ]
  },
  {
    "__docId__": 158,
    "kind": "test",
    "name": "it41",
    "testId": 41,
    "memberof": "test/suite.js~describe35",
    "testDepth": 1,
    "static": true,
    "longname": "test/suite.js~describe35.it41",
    "access": null,
    "description": "#addSuite",
    "lineNumber": 98,
    "testTargets": [
      "Suite#addSuite"
    ]
  },
  {
    "__docId__": 159,
    "kind": "test",
    "name": "describe42",
    "testId": 42,
    "memberof": "test/suite.js~describe35",
    "testDepth": 1,
    "static": true,
    "longname": "test/suite.js~describe35.describe42",
    "access": null,
    "description": "#add",
    "lineNumber": 117,
    "testTargets": [
      "Suite#add"
    ]
  },
  {
    "__docId__": 160,
    "kind": "test",
    "name": "it43",
    "testId": 43,
    "memberof": "test/suite.js~describe35.describe42",
    "testDepth": 2,
    "static": true,
    "longname": "test/suite.js~describe35.describe42.it43",
    "access": null,
    "description": "Benchmark",
    "lineNumber": 118
  },
  {
    "__docId__": 161,
    "kind": "test",
    "name": "it44",
    "testId": 44,
    "memberof": "test/suite.js~describe35.describe42",
    "testDepth": 2,
    "static": true,
    "longname": "test/suite.js~describe35.describe42.it44",
    "access": null,
    "description": "Suite",
    "lineNumber": 129
  },
  {
    "__docId__": 162,
    "kind": "test",
    "name": "it45",
    "testId": 45,
    "memberof": "test/suite.js~describe35.describe42",
    "testDepth": 2,
    "static": true,
    "longname": "test/suite.js~describe35.describe42.it45",
    "access": null,
    "description": "function",
    "lineNumber": 142
  },
  {
    "__docId__": 163,
    "kind": "test",
    "name": "it46",
    "testId": 46,
    "memberof": "test/suite.js~describe35.describe42",
    "testDepth": 2,
    "static": true,
    "longname": "test/suite.js~describe35.describe42.it46",
    "access": null,
    "description": "function with override default",
    "lineNumber": 171
  },
  {
    "__docId__": 164,
    "kind": "test",
    "name": "it47",
    "testId": 47,
    "memberof": "test/suite.js~describe35.describe42",
    "testDepth": 2,
    "static": true,
    "longname": "test/suite.js~describe35.describe42.it47",
    "access": null,
    "description": "object",
    "lineNumber": 201
  },
  {
    "__docId__": 165,
    "kind": "test",
    "name": "it48",
    "testId": 48,
    "memberof": "test/suite.js~describe35.describe42",
    "testDepth": 2,
    "static": true,
    "longname": "test/suite.js~describe35.describe42.it48",
    "access": null,
    "description": "object with override default",
    "lineNumber": 233
  },
  {
    "__docId__": 166,
    "kind": "test",
    "name": "describe49",
    "testId": 49,
    "memberof": "test/suite.js~describe35",
    "testDepth": 1,
    "static": true,
    "longname": "test/suite.js~describe35.describe49",
    "access": null,
    "description": "#run",
    "lineNumber": 267,
    "testTargets": [
      "Suite#run"
    ]
  },
  {
    "__docId__": 167,
    "kind": "test",
    "name": "describe50",
    "testId": 50,
    "memberof": "test/suite.js~describe35.describe49",
    "testDepth": 2,
    "static": true,
    "longname": "test/suite.js~describe35.describe49.describe50",
    "access": null,
    "description": "call methods order",
    "lineNumber": 268
  },
  {
    "__docId__": 168,
    "kind": "test",
    "name": "it51",
    "testId": 51,
    "memberof": "test/suite.js~describe35.describe49.describe50",
    "testDepth": 3,
    "static": true,
    "longname": "test/suite.js~describe35.describe49.describe50.it51",
    "access": null,
    "description": "empty tests",
    "lineNumber": 269
  },
  {
    "__docId__": 169,
    "kind": "test",
    "name": "it52",
    "testId": 52,
    "memberof": "test/suite.js~describe35.describe49.describe50",
    "testDepth": 3,
    "static": true,
    "longname": "test/suite.js~describe35.describe49.describe50.it52",
    "access": null,
    "description": "empty tests (enabled parallel)",
    "lineNumber": 303
  },
  {
    "__docId__": 170,
    "kind": "test",
    "name": "it53",
    "testId": 53,
    "memberof": "test/suite.js~describe35.describe49.describe50",
    "testDepth": 3,
    "static": true,
    "longname": "test/suite.js~describe35.describe49.describe50.it53",
    "access": null,
    "description": "with test",
    "lineNumber": 338
  },
  {
    "__docId__": 171,
    "kind": "test",
    "name": "it54",
    "testId": 54,
    "memberof": "test/suite.js~describe35.describe49.describe50",
    "testDepth": 3,
    "static": true,
    "longname": "test/suite.js~describe35.describe49.describe50.it54",
    "access": null,
    "description": "with test (enabled parallel)",
    "lineNumber": 435
  },
  {
    "__docId__": 172,
    "kind": "test",
    "name": "it55",
    "testId": 55,
    "memberof": "test/suite.js~describe35.describe49",
    "testDepth": 2,
    "static": true,
    "longname": "test/suite.js~describe35.describe49.it55",
    "access": null,
    "description": "context handling",
    "lineNumber": 585
  },
  {
    "__docId__": 173,
    "kind": "test",
    "name": "it56",
    "testId": 56,
    "memberof": "test/suite.js~describe35.describe49",
    "testDepth": 2,
    "static": true,
    "longname": "test/suite.js~describe35.describe49.it56",
    "access": null,
    "description": "context handling (enabled parallel)",
    "lineNumber": 589
  },
  {
    "__docId__": 174,
    "kind": "test",
    "name": "it57",
    "testId": 57,
    "memberof": "test/suite.js~describe35.describe49",
    "testDepth": 2,
    "static": true,
    "longname": "test/suite.js~describe35.describe49.it57",
    "access": null,
    "description": "arguments for methods",
    "lineNumber": 683
  },
  {
    "__docId__": 175,
    "kind": "test",
    "name": "it58",
    "testId": 58,
    "memberof": "test/suite.js~describe35.describe49",
    "testDepth": 2,
    "static": true,
    "longname": "test/suite.js~describe35.describe49.it58",
    "access": null,
    "description": "arguments for methods (enabled parallel)",
    "lineNumber": 687
  }
]