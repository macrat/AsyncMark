[
  {
    "__docId__": 1,
    "kind": "external",
    "name": "Infinity",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Infinity",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Infinity",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 2,
    "kind": "external",
    "name": "NaN",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/NaN",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~NaN",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 3,
    "kind": "external",
    "name": "undefined",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~undefined",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 4,
    "kind": "external",
    "name": "null",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/null",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~null",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 5,
    "kind": "external",
    "name": "Object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 6,
    "kind": "external",
    "name": "object",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~object",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 7,
    "kind": "external",
    "name": "Function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 8,
    "kind": "external",
    "name": "function",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~function",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 9,
    "kind": "external",
    "name": "Boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 10,
    "kind": "external",
    "name": "boolean",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Boolean",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~boolean",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 11,
    "kind": "external",
    "name": "Symbol",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Symbol",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 12,
    "kind": "external",
    "name": "Error",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Error",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 13,
    "kind": "external",
    "name": "EvalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/EvalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~EvalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 14,
    "kind": "external",
    "name": "InternalError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/InternalError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~InternalError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 15,
    "kind": "external",
    "name": "RangeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RangeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RangeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 16,
    "kind": "external",
    "name": "ReferenceError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ReferenceError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ReferenceError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 17,
    "kind": "external",
    "name": "SyntaxError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/SyntaxError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~SyntaxError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 18,
    "kind": "external",
    "name": "TypeError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypeError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~TypeError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 19,
    "kind": "external",
    "name": "URIError",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/URIError",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~URIError",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 20,
    "kind": "external",
    "name": "Number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 21,
    "kind": "external",
    "name": "number",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~number",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 22,
    "kind": "external",
    "name": "Date",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Date",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 23,
    "kind": "external",
    "name": "String",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~String",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 24,
    "kind": "external",
    "name": "string",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~string",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 25,
    "kind": "external",
    "name": "RegExp",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/RegExp",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~RegExp",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 26,
    "kind": "external",
    "name": "Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 27,
    "kind": "external",
    "name": "Int8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 28,
    "kind": "external",
    "name": "Uint8Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "Uint8ClampedArray",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8ClampedArray",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint8ClampedArray",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Int16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 31,
    "kind": "external",
    "name": "Uint16Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint16Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint16Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 32,
    "kind": "external",
    "name": "Int32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Int32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Int32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 33,
    "kind": "external",
    "name": "Uint32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Uint32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 34,
    "kind": "external",
    "name": "Float32Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float32Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float32Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 35,
    "kind": "external",
    "name": "Float64Array",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Float64Array",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Float64Array",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 36,
    "kind": "external",
    "name": "Map",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Map",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 37,
    "kind": "external",
    "name": "Set",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Set",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Set",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 38,
    "kind": "external",
    "name": "WeakMap",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakMap",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakMap",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 39,
    "kind": "external",
    "name": "WeakSet",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/WeakSet",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~WeakSet",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 40,
    "kind": "external",
    "name": "ArrayBuffer",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~ArrayBuffer",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 41,
    "kind": "external",
    "name": "DataView",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/DataView",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~DataView",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 42,
    "kind": "external",
    "name": "JSON",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~JSON",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 43,
    "kind": "external",
    "name": "Promise",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Promise",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 44,
    "kind": "external",
    "name": "Generator",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Generator",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 45,
    "kind": "external",
    "name": "GeneratorFunction",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/GeneratorFunction",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~GeneratorFunction",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 46,
    "kind": "external",
    "name": "Reflect",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Reflect",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Reflect",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "__docId__": 47,
    "kind": "external",
    "name": "Proxy",
    "externalLink": "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy",
    "memberof": "src/.external-ecmascript.js",
    "static": true,
    "longname": "src/.external-ecmascript.js~Proxy",
    "access": "public",
    "description": "",
    "builtinExternal": true
  },
  {
    "kind": "index",
    "content": "AsyncMark\n=========\n\nA benchmarking library for javascript that supports Promise.\n\n[![NPM](https://nodei.co/npm/asyncmark.png)](https://nodei.co/npm/asyncmark/)\n\n[![Build Status](https://travis-ci.org/macrat/AsyncMark.svg?branch=master)](https://travis-ci.org/macrat/AsyncMark)\n[![Test Coverage](https://api.codeclimate.com/v1/badges/cd3cd1561b170ca42584/test_coverage)](https://codeclimate.com/github/macrat/AsyncMark/test_coverage)\n[![Maintainability](https://api.codeclimate.com/v1/badges/cd3cd1561b170ca42584/maintainability)](https://codeclimate.com/github/macrat/AsyncMark/maintainability)\n[![devDependencies Status](https://david-dm.org/macrat/asyncmark/dev-status.svg)](https://david-dm.org/macrat/asyncmark?type=dev)\n[![optionalDependencies Status](https://david-dm.org/macrat/asyncmark/optional-status.svg)](https://david-dm.org/macrat/asyncmark?type=optional)\n[![license](https://img.shields.io/github/license/macrat/AsyncMark.svg)](https://github.com/macrat/AsyncMark/blob/master/LICENSE)\n[![document](https://macrat.github.io/AsyncMark/badge.svg)](https://macrat.github.io/AsyncMark/)\n\nYou can [try benchmark on the web](https://macrat.github.io/AsyncMark/on-web/index.html).\n\n## be simple\n``` javascript\nimport Benchmark from 'asyncmark';\n\n\nnew Benchmark(function() {\n    return new Promise((resolve, reject) => {\n        setTimeout(resolve, 100);\n    });\n}).run().catch(console.error);\n```\n\n## be customizable\n``` javascript\nimport {Suite} from 'asyncmark';\n\n\nconst suite = new Suite({\n    name: 'ways to find a character',\n    beforeEach() {\n        this.text = 'hello world';\n    },\n    parallel: true,\n});\n\nsuite.add(function() {\n    /o/.test(this.text);\n});\n\nsuite.add({\n    name: 'String#indexOf',\n    before() {\n        console.log('starting String#indexOf...');\n    },\n    fun() {\n        this.text.indexOf('o') > -1;\n    },\n});\n\nsuite.add(new Benchmark({\n    name: 'String#match',\n    fun() {\n        Boolean(this.text.match(/o/));\n    },\n    after(result) {\n        console.log('String#match is done! ' + result);\n    },\n}));\n\nsuite.run()\n    .then(results => {\n        let min = results[0];\n        results.forEach(x => {\n            if (min.average > x.average) {\n                min = x;\n            }\n        });\n        console.log(min.name + ' is best way!');\n    })\n    .catch(err => console.error(err));\n```\n\n## with unit test\n``` javascript\nimport Benchmark from 'asyncmark';\n\n\ndescribe('benchmark test', function() {\n    it('foobar', async function() {\n        const result = await new Benchmark(function() {\n            # do_something\n        }).run();\n\n        result.assert(\"<100ms\");  # expect faster than 100ms.\n    });\n});\n```\n\n## installation\n### Node.js\n``` shell\n$ npm install asyncmark\n```\n\n#### ES6\n``` javascript\nimport Benchmark, {Suite} from 'asyncmark';\n```\n\n#### CommonJS\n``` javascript\nconst AsyncMark = require('asyncmark');\n\nconst Benchmark = AsyncMark.Benchmark;\nconst Suite = AsyncMark.Suite;\n```\n\n### Browser\n``` html\n<script src=\"https://unpkg.com/asyncmark\"></script>\n<script>\nconst Benchmark = AsyncMark.Benchmark;\nconst Suite = AsyncMark.Suite;\n</script>\n```\n",
    "longname": "/mnt/tmpfs/AsyncMark/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  },
  {
    "kind": "packageJSON",
    "content": "{\n  \"name\": \"asyncmark\",\n  \"version\": \"0.3.5\",\n  \"description\": \"A benchmarking library that supports Promise.\",\n  \"main\": \"dist/asyncmark\",\n  \"types\": \"index.d.ts\",\n  \"unpkg\": \"dist/asyncmark.min.js\",\n  \"files\": [\n    \"README.md\",\n    \"LICESNSE\",\n    \"dist\",\n    \"index.d.ts\"\n  ],\n  \"scripts\": {\n    \"test\": \"npm-run-all test:*\",\n    \"test:eslint\": \"npm-run-all test:eslint:*\",\n    \"test:eslint:scripts\": \"eslint src/*.js examples/*.js build.js\",\n    \"test:eslint:tests\": \"eslint --global \\\"describe,it\\\" test/*.js\",\n    \"test:mocha\": \"cross-env NODE_ENV=development nyc --require @babel/register --reporter lcov --reporter text mocha\",\n    \"build\": \"npm-run-all build:*\",\n    \"build:dist\": \"cross-env NODE_ENV=production node build.js\",\n    \"build:docs\": \"cross-env NODE_ENV=production esdoc\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/macrat/AsyncMark.git\"\n  },\n  \"keywords\": [\n    \"benchmark\",\n    \"benchmarking\",\n    \"promise\",\n    \"asynchronous\",\n    \"async\"\n  ],\n  \"author\": \"MacRat <m@crat.jp> (https://blanktar.jp)\",\n  \"license\": \"MIT\",\n  \"bugs\": \"https://github.com/macrat/AsyncMark/issues\",\n  \"homepage\": \"https://macrat.github.io/AsyncMark/\",\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.10.2\",\n    \"@babel/plugin-transform-runtime\": \"^7.10.1\",\n    \"@babel/preset-env\": \"^7.10.2\",\n    \"@babel/register\": \"^7.10.1\",\n    \"@babel/runtime\": \"^7.10.2\",\n    \"@rollup/plugin-typescript\": \"^4.1.2\",\n    \"babel-preset-power-assert\": \"^3.0.0\",\n    \"cross-env\": \"^7.0.2\",\n    \"esdoc\": \"^1.1.0\",\n    \"esdoc-importpath-plugin\": \"^1.0.2\",\n    \"esdoc-standard-plugin\": \"^1.0.0\",\n    \"eslint\": \"^7.2.0\",\n    \"mocha\": \"^7.2.0\",\n    \"npm-run-all\": \"^4.1.5\",\n    \"nyc\": \"^15.1.0\",\n    \"power-assert\": \"^1.6.1\",\n    \"rollup\": \"^2.13.1\",\n    \"rollup-plugin-babel\": \"^4.4.0\",\n    \"rollup-plugin-terser\": \"^6.1.0\",\n    \"typescript\": \"^3.9.5\"\n  },\n  \"runkitExample\": \"const AsyncMark = require('asyncmark');\\n\\nnew AsyncMark.Benchmark(function() {\\n    return new Promise((resolve, reject) => {\\n        setTimeout(resolve, 100);\\n    });\\n}).run().catch(console.error);\\n\",\n  \"esdoc\": {\n    \"source\": \"./src\",\n    \"destination\": \"./docs\",\n    \"plugins\": [\n      {\n        \"name\": \"esdoc-standard-plugin\",\n        \"option\": {\n          \"test\": {\n            \"source\": \"./test/\",\n            \"includes\": [\n              \".*\\\\.js$\"\n            ]\n          }\n        }\n      },\n      {\n        \"name\": \"esdoc-importpath-plugin\",\n        \"option\": {\n          \"replaces\": [\n            {\n              \"from\": \"^.*$\",\n              \"to\": \"dist/asyncmark.mjs\"\n            }\n          ]\n        }\n      }\n    ]\n  },\n  \"babel\": {\n    \"env\": {\n      \"development\": {\n        \"presets\": [\n          \"@babel/preset-env\",\n          \"power-assert\"\n        ],\n        \"plugins\": [\n          \"@babel/plugin-transform-runtime\"\n        ]\n      }\n    }\n  },\n  \"eslintConfig\": {\n    \"extends\": \"eslint:recommended\",\n    \"rules\": {\n      \"arrow-body-style\": [\n        \"warn\",\n        \"as-needed\"\n      ],\n      \"arrow-parens\": [\n        \"warn\",\n        \"as-needed\"\n      ],\n      \"eqeqeq\": \"error\",\n      \"indent\": [\n        \"error\",\n        4\n      ],\n      \"init-declarations\": [\n        \"error\",\n        \"always\"\n      ],\n      \"no-catch-shadow\": \"warn\",\n      \"no-console\": \"off\",\n      \"no-floating-decimal\": \"error\",\n      \"no-implicit-coercion\": \"error\",\n      \"no-label-var\": \"error\",\n      \"no-self-compare\": \"error\",\n      \"no-shadow\": \"error\",\n      \"no-template-curly-in-string\": \"warn\",\n      \"no-throw-literal\": \"error\",\n      \"no-unused-vars\": \"off\",\n      \"no-var\": \"error\",\n      \"prefer-const\": \"warn\",\n      \"prefer-promise-reject-errors\": \"error\",\n      \"quotes\": [\n        \"warn\",\n        \"single\"\n      ],\n      \"space-before-blocks\": [\n        \"warn\",\n        {\n          \"functions\": \"always\",\n          \"keywords\": \"always\",\n          \"classes\": \"always\"\n        }\n      ],\n      \"valid-jsdoc\": \"warn\",\n      \"yoda\": \"warn\"\n    },\n    \"env\": {\n      \"browser\": true,\n      \"es6\": true,\n      \"node\": true\n    },\n    \"parserOptions\": {\n      \"ecmaVersion\": 2017,\n      \"sourceType\": \"module\"\n    }\n  }\n}\n",
    "longname": "/mnt/tmpfs/AsyncMark/package.json",
    "name": "package.json",
    "static": true,
    "access": "public"
  },
  {
    "__docId__": 48,
    "kind": "testFile",
    "name": "test/assertion.js",
    "content": "import assert from 'power-assert';\n\nimport AssertRule, {unit, AssertionError, AlternateError} from '../src/assertion.js';\nimport {Result} from '../src';\n\n\ndescribe('assertion', function() {\n    /**\n     * @test {unit}\n     */\n    it('unit converter', function() {\n        assert(unit('s') === 1000);\n        assert(unit('sec') === 1000);\n\n        assert(unit('') === 1);\n        assert(unit('ms') === 1);\n        assert(unit('msec') === 1);\n\n        assert(unit('us') === 0.001);\n        assert(unit('usec') === 0.001);\n\n        assert(unit('ns') === 0.000001);\n        assert(unit('nsec') === 0.000001);\n\n        assert.throws(() => unit('foobar'), Error, 'unknown unit name: \"foobar\"');\n    });\n\n    describe('error generator', function() {\n        [['AssertionError', AssertionError], ['Error', AlternateError]].map(([name, fn]) => {\n            /**\n             * @test {AssertionError}\n             * @test {AlternateError}\n             */\n            it(fn.name, function() {\n                assert.throws(\n                    () => {\n                        throw fn(new AssertRule('100'), new Result('hoge', [100.1]));\n                    }, {\n                        name: name,\n                        message: 'benchmark \"hoge\": actual:100.1msec/op <= expected:100msec/op',\n                        actual: '100.1 msec/op',\n                        expected: '100 msec/op',\n                        operator: '<=',\n                    },\n                );\n\n                assert.throws(\n                    () => {\n                        throw fn(new AssertRule('>0.1s'), new Result('fuga', [10]));\n                    }, {\n                        name: name,\n                        message: 'benchmark \"fuga\": actual:10msec/op > expected:100msec/op',\n                        actual: '10 msec/op',\n                        expected: '100 msec/op',\n                        operator: '>',\n                    },\n                );\n            });\n        });\n    });\n\n    /**\n     * @test {AssertRule}\n     */\n    describe('AssertRule', function() {\n        /**\n         * @test {AssertRule#constructor}\n         */\n        it('#constructor', function() {\n            function parseTest(expr, expect, unit_) {\n                const x = new AssertRule(`${expr}${expect}${unit_}`)\n\n                assert(x.operator === (expr || '<='));\n                assert(x.expected === expect * unit(unit_));\n            }\n\n            assert.throws(function() { new AssertRule('=100') }, Error, 'Invalid rule format: \"=100\"');\n            assert.throws(function() { new AssertRule('>1h') }, Error, 'Invalid rule format: \">1h\"');\n\n            parseTest('', 100, '');\n\n            parseTest('>', 12.3, '');\n            parseTest('>=', 12.3, '');\n            parseTest('<', 12.3, '');\n            parseTest('<=', 12.3, '');\n\n            parseTest('', 1234, 'us');\n            parseTest('', 1.234, 's');\n        });\n\n        /**\n         * @test {AssertRule#check}\n         */\n        it('#check', function() {\n            assert(new AssertRule('<100').check(99.9) === true);\n            assert(new AssertRule('<100').check(100.0) === false);\n\n            assert(new AssertRule('<=100').check(100.0) === true);\n            assert(new AssertRule('<=100').check(100.1) === false);\n\n            assert(new AssertRule('>100').check(100.1) === true);\n            assert(new AssertRule('>100').check(100.0) === false);\n\n            assert(new AssertRule('>=100').check(100.0) === true);\n            assert(new AssertRule('>=100').check(99.9) === false);\n        });\n\n        /**\n         * @test {AssertRule#assert}\n         */\n        describe('#assert', function() {\n            const rule = new AssertRule('100');\n\n            assert.doesNotThrow(() => rule.assert(new Result('hoge', [100])));\n\n            assert.throws(\n                () => rule.assert(new Result('hoge', [100.1])),\n                {\n                    name: 'AssertionError',\n                    message: 'benchmark \"hoge\": actual:100.1msec/op <= expected:100msec/op',\n                    actual: '100.1 msec/op',\n                    expected: '100 msec/op',\n                    operator: '<=',\n                },\n            );\n        });\n    });\n});\n",
    "static": true,
    "longname": "/mnt/tmpfs/AsyncMark/test/assertion.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 49,
    "kind": "test",
    "name": "describe0",
    "testId": 0,
    "memberof": "test/assertion.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/assertion.js~describe0",
    "access": null,
    "description": "assertion",
    "lineNumber": 7
  },
  {
    "__docId__": 50,
    "kind": "test",
    "name": "it1",
    "testId": 1,
    "memberof": "test/assertion.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/assertion.js~describe0.it1",
    "access": null,
    "description": "unit converter",
    "lineNumber": 11,
    "testTargets": [
      "unit"
    ]
  },
  {
    "__docId__": 51,
    "kind": "test",
    "name": "describe2",
    "testId": 2,
    "memberof": "test/assertion.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/assertion.js~describe0.describe2",
    "access": null,
    "description": "error generator",
    "lineNumber": 28
  },
  {
    "__docId__": 52,
    "kind": "test",
    "name": "it3",
    "testId": 3,
    "memberof": "test/assertion.js~describe0.describe2",
    "testDepth": 2,
    "static": true,
    "longname": "test/assertion.js~describe0.describe2.it3",
    "access": null,
    "lineNumber": 34,
    "testTargets": [
      "AssertionError",
      "AlternateError"
    ]
  },
  {
    "__docId__": 53,
    "kind": "test",
    "name": "describe4",
    "testId": 4,
    "memberof": "test/assertion.js~describe0",
    "testDepth": 1,
    "static": true,
    "longname": "test/assertion.js~describe0.describe4",
    "access": null,
    "description": "AssertRule",
    "lineNumber": 65,
    "testTargets": [
      "AssertRule"
    ]
  },
  {
    "__docId__": 54,
    "kind": "test",
    "name": "it5",
    "testId": 5,
    "memberof": "test/assertion.js~describe0.describe4",
    "testDepth": 2,
    "static": true,
    "longname": "test/assertion.js~describe0.describe4.it5",
    "access": null,
    "description": "#constructor",
    "lineNumber": 69,
    "testTargets": [
      "AssertRule#constructor"
    ]
  },
  {
    "__docId__": 55,
    "kind": "test",
    "name": "it6",
    "testId": 6,
    "memberof": "test/assertion.js~describe0.describe4",
    "testDepth": 2,
    "static": true,
    "longname": "test/assertion.js~describe0.describe4.it6",
    "access": null,
    "description": "#check",
    "lineNumber": 94,
    "testTargets": [
      "AssertRule#check"
    ]
  },
  {
    "__docId__": 56,
    "kind": "test",
    "name": "describe7",
    "testId": 7,
    "memberof": "test/assertion.js~describe0.describe4",
    "testDepth": 2,
    "static": true,
    "longname": "test/assertion.js~describe0.describe4.describe7",
    "access": null,
    "description": "#assert",
    "lineNumber": 111,
    "testTargets": [
      "AssertRule#assert"
    ]
  },
  {
    "__docId__": 57,
    "kind": "testFile",
    "name": "test/benchmark.js",
    "content": "import assert from 'power-assert';\n\nimport Benchmark, {Benchmark as Bench2, Result} from '../src';\n\n\n/**\n * @test {Benchmark}\n */\ndescribe('Benchmark', function() {\n    it('module exports', function() {\n        assert(Benchmark === Bench2);\n    });\n\n    /**\n     * @test {Benchmark#constructor}\n     */\n    describe('#constructor', function() {\n        it('default values', function() {\n            const b = new Benchmark();\n\n            assert(b.name === 'unnamed');\n            assert(b.targetErrorRate === 0.1);\n            assert(b.maxNumber === 10000);\n            assert(b.minNumber === 30);\n            assert(b.number === null);\n        });\n\n        it('function argument', function() {\n            let called = false;\n            const f = function() {\n                called = true;\n            }\n            const b = new Benchmark(f);\n\n            assert(b.fun === f);\n\n            assert(called === false);\n            b.fun();\n            assert(called === true);\n        });\n\n        describe('object argument', function() {\n            it('with auto number', function() {\n                const conf = {\n                    name: 'test name',\n                    targetErrorRate: 0.2,\n                    maxNumber: 100,\n                    minNumber: 10,\n                };\n                const b = new Benchmark(conf);\n\n                assert(b.name === conf.name);\n                assert(b.targetErrorRate === conf.targetErrorRate);\n                assert(b.maxNumber === conf.maxNumber);\n                assert(b.minNumber === conf.minNumber);\n            });\n\n            it('with specify number', function() {\n                const conf = {\n                    name: 'test name',\n                    number: 42,\n                };\n                const b = new Benchmark(conf);\n\n                assert(b.name === conf.name);\n                assert(b.number === conf.number);\n            });\n\n            it('functions', function() {\n                const called = {\n                    before: false,\n                    beforeEach: false,\n                    fun: false,\n                    afterEach: false,\n                    after: false,\n                };\n                const conf = {\n                    name: 'test name',\n                    number: 42,\n                    before() {\n                        called.before = true;\n                    },\n                    beforeEach() {\n                        called.beforeEach = true;\n                    },\n                    fun() {\n                        called.fun = true;\n                    },\n                    afterEach() {\n                        called.afterEach = true;\n                    },\n                    after() {\n                        called.after = true;\n                    },\n                };\n                const b = new Benchmark(conf);\n\n                assert(b.name === conf.name);\n                assert(b.number === conf.number);\n\n                assert(called.before === false);\n                b.before();\n                assert(called.before === true);\n\n                assert(called.beforeEach === false);\n                b.beforeEach();\n                assert(called.beforeEach === true);\n\n                assert(called.fun === false);\n                b.fun();\n                assert(called.fun === true);\n\n                assert(called.afterEach === false);\n                b.afterEach();\n                assert(called.afterEach === true);\n\n                assert(called.after === false);\n                b.after();\n                assert(called.after === true);\n            });\n        });\n    });\n\n    /**\n     * @test {Benchmark#fun}\n     */\n    describe('#fun', function() {\n        it('default behavior', async function() {\n            const b = new Benchmark();\n\n            const err = await b.fun().then(() => null).catch(e => e);\n            assert(err !== null, 'excepted error but not throwed');\n            assert(err.message === 'target function is not defined');\n        });\n    });\n\n    /**\n     * @test {Benchmark#after}\n     */\n    describe('#after', function() {\n        it('default behavior', async function() {\n            const l = console.log;\n            const messages = [];\n            // eslint-disable-next-line require-atomic-updates\n            console.log = function() {\n                messages.push([...arguments].map(x => String(x)).join(' '));\n            }\n\n            try {\n                const b = new Benchmark();\n                const r = new Result('after_test', [1, 2, 3, 4, 5, 100])\n\n                await b.after(r);\n\n                assert.deepStrictEqual(messages, [new Result('after_test', [1, 2, 3, 4, 5]).toString()]);\n            } finally {\n                // eslint-disable-next-line require-atomic-updates\n                console.log = l;\n            }\n        });\n    });\n\n    /**\n     * @test {Benchmark#run}\n     */\n    describe('#run', function() {\n        it('call methods order', async function() {\n            const callLog = [];\n\n            const conf = {\n                number: 2,\n                before() { callLog.push('before'); },\n                beforeEach() { callLog.push('beforeEach'); },\n                fun() { callLog.push('fun'); },\n                afterEach() { callLog.push('afterEach'); },\n                after() { callLog.push('after'); },\n            };\n            const b = new Benchmark(conf);\n\n            const l = console.log;\n            const messages = [];\n            // eslint-disable-next-line require-atomic-updates\n            console.log = function() {\n                messages.push([...arguments].map(x => String(x)).join(' '));\n            }\n\n            try {\n                await b.run();\n\n                assert.deepStrictEqual(callLog, [\n                    'before',\n                    'beforeEach',\n                    'fun',\n                    'afterEach',\n                    'beforeEach',\n                    'fun',\n                    'afterEach',\n                    'after',\n                ]);\n                assert.deepStrictEqual(messages, []);\n            } finally {\n                // eslint-disable-next-line require-atomic-updates\n                console.log = l;\n            }\n        });\n\n        it('call methods order (with callbacks)', async function() {\n            const callLog = [];\n\n            const conf = {\n                number: 2,\n                before() { callLog.push('before'); },\n                beforeEach() { callLog.push('beforeEach'); },\n                fun() { callLog.push('fun'); },\n                afterEach() { callLog.push('afterEach'); },\n                after() { callLog.push('after'); },\n            };\n            const b = new Benchmark(conf);\n\n            const l = console.log;\n            const messages = [];\n            // eslint-disable-next-line require-atomic-updates\n            console.log = function() {\n                messages.push([...arguments].map(x => String(x)).join(' '));\n            }\n\n            try {\n                await b.run({}, {\n                    beforeTest() { callLog.push('beforeTest'); },\n                    afterTest() { callLog.push('afterTest'); },\n                });\n\n                assert.deepStrictEqual(callLog, [\n                    'before',\n                    'beforeTest',\n                    'beforeEach',\n                    'fun',\n                    'afterEach',\n                    'afterTest',\n                    'beforeTest',\n                    'beforeEach',\n                    'fun',\n                    'afterEach',\n                    'afterTest',\n                    'after',\n                ]);\n                assert.deepStrictEqual(messages, []);\n            } finally {\n                // eslint-disable-next-line require-atomic-updates\n                console.log = l;\n            }\n        });\n\n        it('context handling', async function() {\n            const conf = {\n                number: 2,\n                before() {\n                    assert(this.inOuter === undefined);\n                    assert(this.inInner === undefined);\n                    assert(this.inFunc === undefined);\n                    assert(this.outInner === undefined);\n                    assert(this.outOuter === undefined);\n\n                    this.inOuter = 123;\n                },\n                beforeEach() {\n                    assert(this.inOuter === 123);\n                    assert(this.inInner === undefined);\n                    assert(this.inFunc === undefined);\n                    assert(this.outInner === undefined);\n                    assert(this.outOuter === undefined);\n\n                    this.inInner = 'abc';\n                },\n                fun() {\n                    assert(this.inOuter === 123);\n                    assert(this.inInner === 'abc');\n                    assert(this.inFunc === undefined);\n                    assert(this.outInner === undefined);\n                    assert(this.outOuter === undefined);\n\n                    this.inFunc = true;\n                },\n                afterEach() {\n                    assert(this.inOuter === 123);\n                    assert(this.inInner === 'abc');\n                    assert(this.inFunc === true);\n                    assert(this.outInner === undefined);\n                    assert(this.outOuter === undefined);\n\n                    this.outInner = 'cba';\n                },\n                after() {\n                    assert(this.inOuter === 123);\n                    assert(this.inInner === undefined);\n                    assert(this.inFunc === undefined);\n                    assert(this.outInner === undefined);\n                    assert(this.outOuter === undefined);\n\n                    this.outOuter = 321;\n                },\n            };\n            const b = new Benchmark(conf);\n\n            const l = console.log;\n            const messages = [];\n            // eslint-disable-next-line require-atomic-updates\n            console.log = function() {\n                messages.push([...arguments].map(x => String(x)).join(' '));\n            }\n\n            try {\n                await b.run({}, {\n                    beforeTest() {\n                        assert(this.inOuter === 123);\n                        assert(this.inInner === undefined);\n                        assert(this.inFunc === undefined);\n                        assert(this.outInner === undefined);\n                        assert(this.outOuter === undefined);\n                    },\n                    afterTest() {\n                        assert(this.inOuter === 123);\n                        assert(this.inInner === 'abc');\n                        assert(this.inFunc === true);\n                        assert(this.outInner === 'cba');\n                        assert(this.outOuter === undefined);\n                    },\n                });\n                assert.deepStrictEqual(messages, []);\n            } finally {\n                // eslint-disable-next-line require-atomic-updates\n                console.log = l;\n            }\n        });\n\n        it('context sandboxing', async function() {\n            const b = new Benchmark({\n                number: 2,\n                fun() {\n                    assert(this.x === undefined);\n                    this.x = 'foobar';\n                    assert(this.x === 'foobar');\n                },\n                after() {},\n            });\n\n            b.run();\n            b.run();\n        });\n\n        it('arguments for methods', async function() {\n            const beforeCounts = [];\n            const afterCounts = [];\n\n            const b = new Benchmark({\n                number: 2,\n                before() {\n                    assert(arguments.length === 0);\n                },\n                beforeEach(count) {\n                    assert(arguments.length === 1);\n\n                    assert(typeof count === 'number');\n                    beforeCounts.push(count);\n                },\n                fun() {\n                    assert(arguments.length === 0);\n                },\n                afterEach(count, msec) {\n                    assert(arguments.length === 2);\n\n                    assert(typeof msec === 'number');\n                    assert(msec < 1);\n\n                    assert(typeof count === 'number');\n                    afterCounts.push(count);\n                },\n                after(result) {\n                    assert(arguments.length === 1);\n\n                    assert(result instanceof Result);\n                    assert(result.msecs.length === 2)\n                },\n            });\n\n            const result = await b.run({}, {\n                beforeTest(count, bench) {\n                    assert(typeof count === 'number');\n                    assert(bench instanceof Benchmark);\n                },\n                afterTest(count, bench, msec) {\n                    assert(typeof count === 'number');\n                    assert(bench instanceof Benchmark);\n                    assert(typeof msec === 'number');\n                    assert(msec < 1);\n                },\n            });\n            assert(result instanceof Result);\n            assert(result.msecs.length === 2);\n\n            assert.deepStrictEqual(beforeCounts, [0, 1]);\n            assert.deepStrictEqual(afterCounts, [0, 1]);\n        });\n\n        describe('loop and time', function() {\n            it('static number', async function() {\n                const r100 = await new Benchmark({\n                    number: 3,\n                    fun() {\n                        return new Promise((resolve, reject) => setTimeout(resolve, 100));\n                    },\n                    after() {}\n                }).run();\n                assert(Math.abs(r100.average - 100) <= 3);\n\n                const r42 = await new Benchmark({\n                    number: 3,\n                    fun() {\n                        return new Promise((resolve, reject) => setTimeout(resolve, 42));\n                    },\n                    after() {}\n                }).run();\n                assert(Math.abs(r42.average - 42) <= 3);\n            });\n\n            it('auto / rate 20%', async function() {\n                const r = await new Benchmark({\n                    minNumber: 5,\n                    maxNumber: 100,\n                    targetErrorRate: 0.2,\n                    fun() {\n                        return new Promise((resolve, reject) => setTimeout(resolve, 49 + Math.random() * 2));\n                    },\n                    after() {},\n                }).run();\n\n                assert(r.msecs.length >= 5);\n                assert(r.msecs.length <= 100);\n                assert(r.errorRate <= 0.2);\n            });\n\n            it('auto / rate 40%', async function() {\n                const r = await new Benchmark({\n                    minNumber: 5,\n                    maxNumber: 100,\n                    targetErrorRate: 0.4,\n                    fun() {\n                        return new Promise((resolve, reject) => setTimeout(resolve, 49 + Math.random() * 2));\n                    },\n                    after() {},\n                }).run();\n\n                assert(r.msecs.length >= 5);\n                assert(r.msecs.length <= 100);\n                assert(r.errorRate <= 0.4);\n            });\n        });\n    });\n});\n",
    "static": true,
    "longname": "/mnt/tmpfs/AsyncMark/test/benchmark.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 58,
    "kind": "test",
    "name": "describe8",
    "testId": 8,
    "memberof": "test/benchmark.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/benchmark.js~describe8",
    "access": null,
    "description": "Benchmark",
    "lineNumber": 9,
    "testTargets": [
      "Benchmark"
    ]
  },
  {
    "__docId__": 59,
    "kind": "test",
    "name": "it9",
    "testId": 9,
    "memberof": "test/benchmark.js~describe8",
    "testDepth": 1,
    "static": true,
    "longname": "test/benchmark.js~describe8.it9",
    "access": null,
    "description": "module exports",
    "lineNumber": 10
  },
  {
    "__docId__": 60,
    "kind": "test",
    "name": "describe10",
    "testId": 10,
    "memberof": "test/benchmark.js~describe8",
    "testDepth": 1,
    "static": true,
    "longname": "test/benchmark.js~describe8.describe10",
    "access": null,
    "description": "#constructor",
    "lineNumber": 17,
    "testTargets": [
      "Benchmark#constructor"
    ]
  },
  {
    "__docId__": 61,
    "kind": "test",
    "name": "it11",
    "testId": 11,
    "memberof": "test/benchmark.js~describe8.describe10",
    "testDepth": 2,
    "static": true,
    "longname": "test/benchmark.js~describe8.describe10.it11",
    "access": null,
    "description": "default values",
    "lineNumber": 18
  },
  {
    "__docId__": 62,
    "kind": "test",
    "name": "it12",
    "testId": 12,
    "memberof": "test/benchmark.js~describe8.describe10",
    "testDepth": 2,
    "static": true,
    "longname": "test/benchmark.js~describe8.describe10.it12",
    "access": null,
    "description": "function argument",
    "lineNumber": 28
  },
  {
    "__docId__": 63,
    "kind": "test",
    "name": "describe13",
    "testId": 13,
    "memberof": "test/benchmark.js~describe8.describe10",
    "testDepth": 2,
    "static": true,
    "longname": "test/benchmark.js~describe8.describe10.describe13",
    "access": null,
    "description": "object argument",
    "lineNumber": 42
  },
  {
    "__docId__": 64,
    "kind": "test",
    "name": "it14",
    "testId": 14,
    "memberof": "test/benchmark.js~describe8.describe10.describe13",
    "testDepth": 3,
    "static": true,
    "longname": "test/benchmark.js~describe8.describe10.describe13.it14",
    "access": null,
    "description": "with auto number",
    "lineNumber": 43
  },
  {
    "__docId__": 65,
    "kind": "test",
    "name": "it15",
    "testId": 15,
    "memberof": "test/benchmark.js~describe8.describe10.describe13",
    "testDepth": 3,
    "static": true,
    "longname": "test/benchmark.js~describe8.describe10.describe13.it15",
    "access": null,
    "description": "with specify number",
    "lineNumber": 58
  },
  {
    "__docId__": 66,
    "kind": "test",
    "name": "it16",
    "testId": 16,
    "memberof": "test/benchmark.js~describe8.describe10.describe13",
    "testDepth": 3,
    "static": true,
    "longname": "test/benchmark.js~describe8.describe10.describe13.it16",
    "access": null,
    "description": "functions",
    "lineNumber": 69
  },
  {
    "__docId__": 67,
    "kind": "test",
    "name": "describe17",
    "testId": 17,
    "memberof": "test/benchmark.js~describe8",
    "testDepth": 1,
    "static": true,
    "longname": "test/benchmark.js~describe8.describe17",
    "access": null,
    "description": "#fun",
    "lineNumber": 127,
    "testTargets": [
      "Benchmark#fun"
    ]
  },
  {
    "__docId__": 68,
    "kind": "test",
    "name": "it18",
    "testId": 18,
    "memberof": "test/benchmark.js~describe8.describe17",
    "testDepth": 2,
    "static": true,
    "longname": "test/benchmark.js~describe8.describe17.it18",
    "access": null,
    "description": "default behavior",
    "lineNumber": 128
  },
  {
    "__docId__": 69,
    "kind": "test",
    "name": "describe19",
    "testId": 19,
    "memberof": "test/benchmark.js~describe8",
    "testDepth": 1,
    "static": true,
    "longname": "test/benchmark.js~describe8.describe19",
    "access": null,
    "description": "#after",
    "lineNumber": 140,
    "testTargets": [
      "Benchmark#after"
    ]
  },
  {
    "__docId__": 70,
    "kind": "test",
    "name": "it20",
    "testId": 20,
    "memberof": "test/benchmark.js~describe8.describe19",
    "testDepth": 2,
    "static": true,
    "longname": "test/benchmark.js~describe8.describe19.it20",
    "access": null,
    "description": "default behavior",
    "lineNumber": 141
  },
  {
    "__docId__": 71,
    "kind": "test",
    "name": "describe21",
    "testId": 21,
    "memberof": "test/benchmark.js~describe8",
    "testDepth": 1,
    "static": true,
    "longname": "test/benchmark.js~describe8.describe21",
    "access": null,
    "description": "#run",
    "lineNumber": 166,
    "testTargets": [
      "Benchmark#run"
    ]
  },
  {
    "__docId__": 72,
    "kind": "test",
    "name": "it22",
    "testId": 22,
    "memberof": "test/benchmark.js~describe8.describe21",
    "testDepth": 2,
    "static": true,
    "longname": "test/benchmark.js~describe8.describe21.it22",
    "access": null,
    "description": "call methods order",
    "lineNumber": 167
  },
  {
    "__docId__": 73,
    "kind": "test",
    "name": "it23",
    "testId": 23,
    "memberof": "test/benchmark.js~describe8.describe21",
    "testDepth": 2,
    "static": true,
    "longname": "test/benchmark.js~describe8.describe21.it23",
    "access": null,
    "description": "call methods order (with callbacks)",
    "lineNumber": 207
  },
  {
    "__docId__": 74,
    "kind": "test",
    "name": "it24",
    "testId": 24,
    "memberof": "test/benchmark.js~describe8.describe21",
    "testDepth": 2,
    "static": true,
    "longname": "test/benchmark.js~describe8.describe21.it24",
    "access": null,
    "description": "context handling",
    "lineNumber": 254
  },
  {
    "__docId__": 75,
    "kind": "test",
    "name": "it25",
    "testId": 25,
    "memberof": "test/benchmark.js~describe8.describe21",
    "testDepth": 2,
    "static": true,
    "longname": "test/benchmark.js~describe8.describe21.it25",
    "access": null,
    "description": "context sandboxing",
    "lineNumber": 336
  },
  {
    "__docId__": 76,
    "kind": "test",
    "name": "it26",
    "testId": 26,
    "memberof": "test/benchmark.js~describe8.describe21",
    "testDepth": 2,
    "static": true,
    "longname": "test/benchmark.js~describe8.describe21.it26",
    "access": null,
    "description": "arguments for methods",
    "lineNumber": 351
  },
  {
    "__docId__": 77,
    "kind": "test",
    "name": "describe27",
    "testId": 27,
    "memberof": "test/benchmark.js~describe8.describe21",
    "testDepth": 2,
    "static": true,
    "longname": "test/benchmark.js~describe8.describe21.describe27",
    "access": null,
    "description": "loop and time",
    "lineNumber": 405
  },
  {
    "__docId__": 78,
    "kind": "test",
    "name": "it28",
    "testId": 28,
    "memberof": "test/benchmark.js~describe8.describe21.describe27",
    "testDepth": 3,
    "static": true,
    "longname": "test/benchmark.js~describe8.describe21.describe27.it28",
    "access": null,
    "description": "static number",
    "lineNumber": 406
  },
  {
    "__docId__": 79,
    "kind": "test",
    "name": "it29",
    "testId": 29,
    "memberof": "test/benchmark.js~describe8.describe21.describe27",
    "testDepth": 3,
    "static": true,
    "longname": "test/benchmark.js~describe8.describe21.describe27.it29",
    "access": null,
    "description": "auto / rate 20%",
    "lineNumber": 426
  },
  {
    "__docId__": 80,
    "kind": "test",
    "name": "it30",
    "testId": 30,
    "memberof": "test/benchmark.js~describe8.describe21.describe27",
    "testDepth": 3,
    "static": true,
    "longname": "test/benchmark.js~describe8.describe21.describe27.it30",
    "access": null,
    "description": "auto / rate 40%",
    "lineNumber": 442
  },
  {
    "__docId__": 81,
    "kind": "testFile",
    "name": "test/result.js",
    "content": "import assert from 'power-assert';\nimport {AssertionError} from 'assert';\n\nimport {Result} from '../src';\n\n\n/**\n * @test {Result}\n */\ndescribe('Result', function() {\n    /**\n     * @test {Result#total}\n     */\n    it('#total', function() {\n        assert(new Result('test', [10, 20, 30]).total === 60);\n        assert(new Result('test', [11, 22, 33]).total === 66);\n    });\n\n    /**\n     * @test {Result#fastest}\n     */\n    it('#fastest', function() {\n        assert(new Result('test', [10, 20, 30]).fastest === 10);\n        assert(new Result('test', [33, 22, 11]).fastest === 11);\n    });\n\n    /**\n     * @test {Result#slowest}\n     */\n    it('#slowest', function() {\n        assert(new Result('test', [10, 20, 30]).slowest === 30);\n        assert(new Result('test', [33, 22, 11]).slowest === 33);\n    });\n\n    /**\n     * @test {Result#average}\n     */\n    it('#average', function() {\n        assert(new Result('test', [10, 20, 30]).average === 20);\n        assert(new Result('test', [11, 22, 33]).average === 22);\n    });\n\n    /**\n     * @test {Result#variance}\n     */\n    it('#variance', function() {\n        assert(new Result('test', [10, 20, 30]).variance === 100);\n        assert(new Result('test', [11, 22, 33]).variance === 121);\n    });\n\n    /**\n     * @test {Result#std}\n     */\n    it('#std', function() {\n        assert(new Result('test', [10, 20, 30]).std === 10);\n        assert(new Result('test', [11, 22, 33]).std === 11);\n    });\n\n    /**\n     * @test {Result#std}\n     */\n    it('#sem', function() {\n        assert(Math.abs(new Result('test', [10, 20, 30]).sem - 5.7735) < 0.001);\n        assert(Math.abs(new Result('test', [11, 22, 33]).sem - 6.3509) < 0.001);\n    });\n\n    /**\n     * @test {Result#errorRange}\n     */\n    it('#errorRange', function() {\n        assert(Math.abs(new Result('test', [10, 20, 30]).errorRange - 11.3161) < 0.001);\n        assert(Math.abs(new Result('test', [11, 22, 33]).errorRange - 12.4477) < 0.001);\n    });\n\n    /**\n     * @test {Result#errorRate}\n     */\n    it('#errorRate', function() {\n        assert(Math.abs(new Result('test', [10, 20, 30]).errorRate - 0.5658) < 0.001);\n        assert(Math.abs(new Result('test', [11, 22, 33]).errorRate - 0.5658) < 0.001);\n    });\n\n    /**\n     * @test {Result#opsPerSec}\n     */\n    it('#opsPerSec', function() {\n        assert(new Result('test', [1]).opsPerSec === 1000);\n        assert(new Result('test', [200]).opsPerSec === 5);\n    });\n\n    /**\n     * @test {Result#dropOutlier}\n     */\n    it('#opsPerSec', function() {\n        assert.deepStrictEqual(new Result('test', [10, 20, 30]).dropOutlier().msecs, [10, 20, 30]);\n        assert.deepStrictEqual(new Result('test', [10, 11, 12, 13, 14, 15, 100]).dropOutlier().msecs, [10, 11, 12, 13, 14, 15]);\n        assert.deepStrictEqual(new Result('test', [10, 11, 12, 13, 14, 15, 100]).dropOutlier(3).msecs, [10, 11, 12, 13, 14, 15, 100]);\n    });\n\n    /**\n     * @test {Result#toString}\n     */\n    it('#toString', function() {\n        assert(String(new Result('test', [10, 20, 30])) === 'test:\\t50ops/sec\\t20msec/op\\t+-11.3161msec/op (56.58%)\\t3 times tried');\n        assert(String(new Result('test', [1.234567, 2.345678])) === 'test:\\t558.621ops/sec\\t1.7901msec/op\\t+-1.0889msec/op (60.83%)\\t2 times tried');\n    });\n\n    /**\n     * @test {Result#assert}\n     */\n    it('#assert', function() {\n        const result = new Result('test', [100]);\n\n        assert.doesNotThrow(() => {\n            result.assert('>=100ms', '<=100ms');\n        });\n\n        assert.throws(() => {\n            result.assert('>100ms', '<=100ms');\n        }, AssertionError, 'benchmark \"test\": actual:100msec/op > expected:100msec/op');\n\n        assert.throws(() => {\n            result.assert('>=100ms', '<100ms');\n        }, AssertionError, 'benchmark \"test\": actual:100msec/op < expected:100msec/op');\n    });\n});\n",
    "static": true,
    "longname": "/mnt/tmpfs/AsyncMark/test/result.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 82,
    "kind": "test",
    "name": "describe31",
    "testId": 31,
    "memberof": "test/result.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/result.js~describe31",
    "access": null,
    "description": "Result",
    "lineNumber": 10,
    "testTargets": [
      "Result"
    ]
  },
  {
    "__docId__": 83,
    "kind": "test",
    "name": "it32",
    "testId": 32,
    "memberof": "test/result.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "test/result.js~describe31.it32",
    "access": null,
    "description": "#total",
    "lineNumber": 14,
    "testTargets": [
      "Result#total"
    ]
  },
  {
    "__docId__": 84,
    "kind": "test",
    "name": "it33",
    "testId": 33,
    "memberof": "test/result.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "test/result.js~describe31.it33",
    "access": null,
    "description": "#fastest",
    "lineNumber": 22,
    "testTargets": [
      "Result#fastest"
    ]
  },
  {
    "__docId__": 85,
    "kind": "test",
    "name": "it34",
    "testId": 34,
    "memberof": "test/result.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "test/result.js~describe31.it34",
    "access": null,
    "description": "#slowest",
    "lineNumber": 30,
    "testTargets": [
      "Result#slowest"
    ]
  },
  {
    "__docId__": 86,
    "kind": "test",
    "name": "it35",
    "testId": 35,
    "memberof": "test/result.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "test/result.js~describe31.it35",
    "access": null,
    "description": "#average",
    "lineNumber": 38,
    "testTargets": [
      "Result#average"
    ]
  },
  {
    "__docId__": 87,
    "kind": "test",
    "name": "it36",
    "testId": 36,
    "memberof": "test/result.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "test/result.js~describe31.it36",
    "access": null,
    "description": "#variance",
    "lineNumber": 46,
    "testTargets": [
      "Result#variance"
    ]
  },
  {
    "__docId__": 88,
    "kind": "test",
    "name": "it37",
    "testId": 37,
    "memberof": "test/result.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "test/result.js~describe31.it37",
    "access": null,
    "description": "#std",
    "lineNumber": 54,
    "testTargets": [
      "Result#std"
    ]
  },
  {
    "__docId__": 89,
    "kind": "test",
    "name": "it38",
    "testId": 38,
    "memberof": "test/result.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "test/result.js~describe31.it38",
    "access": null,
    "description": "#sem",
    "lineNumber": 62,
    "testTargets": [
      "Result#std"
    ]
  },
  {
    "__docId__": 90,
    "kind": "test",
    "name": "it39",
    "testId": 39,
    "memberof": "test/result.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "test/result.js~describe31.it39",
    "access": null,
    "description": "#errorRange",
    "lineNumber": 70,
    "testTargets": [
      "Result#errorRange"
    ]
  },
  {
    "__docId__": 91,
    "kind": "test",
    "name": "it40",
    "testId": 40,
    "memberof": "test/result.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "test/result.js~describe31.it40",
    "access": null,
    "description": "#errorRate",
    "lineNumber": 78,
    "testTargets": [
      "Result#errorRate"
    ]
  },
  {
    "__docId__": 92,
    "kind": "test",
    "name": "it41",
    "testId": 41,
    "memberof": "test/result.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "test/result.js~describe31.it41",
    "access": null,
    "description": "#opsPerSec",
    "lineNumber": 86,
    "testTargets": [
      "Result#opsPerSec"
    ]
  },
  {
    "__docId__": 93,
    "kind": "test",
    "name": "it42",
    "testId": 42,
    "memberof": "test/result.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "test/result.js~describe31.it42",
    "access": null,
    "description": "#opsPerSec",
    "lineNumber": 94,
    "testTargets": [
      "Result#dropOutlier"
    ]
  },
  {
    "__docId__": 94,
    "kind": "test",
    "name": "it43",
    "testId": 43,
    "memberof": "test/result.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "test/result.js~describe31.it43",
    "access": null,
    "description": "#toString",
    "lineNumber": 103,
    "testTargets": [
      "Result#toString"
    ]
  },
  {
    "__docId__": 95,
    "kind": "test",
    "name": "it44",
    "testId": 44,
    "memberof": "test/result.js~describe31",
    "testDepth": 1,
    "static": true,
    "longname": "test/result.js~describe31.it44",
    "access": null,
    "description": "#assert",
    "lineNumber": 111,
    "testTargets": [
      "Result#assert"
    ]
  },
  {
    "__docId__": 96,
    "kind": "testFile",
    "name": "test/suite.js",
    "content": "import assert from 'power-assert';\n\nimport Benchmark, {Suite, Result} from '../src';\n\n\n/**\n * @test {Suite}\n */\ndescribe('Suite', function() {\n    describe('#constructor', function() {\n        it('default values', function() {\n            const s = new Suite();\n\n            assert(s.name === 'unnamed');\n            assert(s.parallel === false);\n            assert.deepStrictEqual(s.benchmarkDefault, {});\n        });\n\n        it('options', function() {\n            const conf = {\n                name: 'foo',\n                parallel: true,\n                benchmarkDefault: {\n                    name: 'bar',\n                },\n            };\n            const s = new Suite(conf);\n\n            assert(s.name === 'foo');\n            assert(s.parallel === true);\n            assert.deepStrictEqual(s.benchmarkDefault, {name: 'bar'});\n        });\n\n        it('functions', function() {\n            const called = {\n                before: false,\n                beforeEach: false,\n                afterEach: false,\n                after: false,\n            };\n            const s = new Suite({\n                before() {\n                    called.before = true;\n                },\n                beforeEach() {\n                    called.beforeEach = true;\n                },\n                fun() {\n                    called.fun = true;\n                },\n                afterEach() {\n                    called.afterEach = true;\n                },\n                after() {\n                    called.after = true;\n                },\n            });\n\n            assert(called.before === false);\n            s.before();\n            assert(called.before === true);\n\n            assert(called.beforeEach === false);\n            s.beforeEach();\n            assert(called.beforeEach === true);\n\n            assert(called.afterEach === false);\n            s.afterEach();\n            assert(called.afterEach === true);\n\n            assert(called.after === false);\n            s.after();\n            assert(called.after === true);\n        });\n    });\n\n    /**\n     * @test {Suite#addBenchmark}\n     */\n    it('#addBenchmark', function() {\n        const s = new Suite();\n        const b1 = new Benchmark({name: 'a'});\n        const b2 = new Benchmark({name: 'b'});\n\n        assert.deepStrictEqual(s.benchmarks, []);\n        s.addBenchmark(b1);\n        assert.deepStrictEqual(s.benchmarks, [b1]);\n        s.addBenchmark(b2);\n        assert.deepStrictEqual(s.benchmarks, [b1, b2]);\n\n        assert(s.benchmarks[0].name === 'a');\n        assert(s.benchmarks[1].name === 'b');\n    });\n\n    /**\n     * @test {Suite#addSuite}\n     */\n    it('#addSuite', function() {\n        const p = new Suite();\n        const c1 = new Suite();\n        const c2 = new Suite();\n\n        assert(p !== c1);\n        assert(p !== c2);\n        assert(c1 !== c2);\n\n        assert.deepStrictEqual(p.benchmarks, []);\n        p.addBenchmark(c1);\n        assert.deepStrictEqual(p.benchmarks, [c1]);\n        p.addBenchmark(c2);\n        assert.deepStrictEqual(p.benchmarks, [c1, c2]);\n    });\n\n    /**\n     * @test {Suite#add}\n     */\n    describe('#add', function() {\n        it('Benchmark', function() {\n            const s = new Suite();\n            const b = new Benchmark({name: 'foobar'});\n\n            assert.deepStrictEqual(s.benchmarks, []);\n            s.add(b);\n\n            assert.deepStrictEqual(s.benchmarks, [b]);\n            assert(s.benchmarks[0].name === 'foobar');\n        });\n\n        it('Suite', function() {\n            const p = new Suite();\n            const c = new Suite();\n\n            assert(p !== c);\n            assert.deepStrictEqual(p.benchmarks, []);\n\n            p.add(c);\n\n            assert.deepStrictEqual(p.benchmarks, [c]);\n            assert.deepStrictEqual(c.benchmarks, []);\n        });\n\n        it('function', async function() {\n            const called = {\n                fun: false,\n                after: false,\n            };\n            const fun = function() {\n                called.fun = true;\n            };\n            const s = new Suite({\n                benchmarkDefault: {\n                    after() {\n                        called.after = true;\n                    },\n                },\n            });\n\n            assert.deepStrictEqual(s.benchmarks, []);\n            s.add(fun);\n            assert(s.benchmarks.length === 1);\n\n            assert(called.fun === false);\n            await s.benchmarks[0].fun();\n            assert(called.fun === true);\n\n            assert(called.after === false);\n            await s.benchmarks[0].after();\n            assert(called.after === true);\n        });\n\n        it('function with override default', async function() {\n            const called = {\n                original: false,\n                overrided: false,\n            };\n            const s = new Suite({\n                benchmarkDefault: {\n                    fun() {\n                        called.original = true;\n                    },\n                },\n            });\n\n            const conf = {\n                fun() {\n                    called.overrided = true;\n                },\n            };\n\n            assert.deepStrictEqual(s.benchmarks, []);\n            s.add(conf);\n            assert(s.benchmarks.length === 1);\n\n            assert(called.original === false);\n            assert(called.overrided === false);\n            await s.benchmarks[0].fun();\n            assert(called.original === false);\n            assert(called.overrided === true);\n        });\n\n        it('object', async function() {\n            const called = {\n                fun: false,\n                after: false,\n            };\n            const s = new Suite({\n                benchmarkDefault: {\n                    after() {\n                        called.after = true;\n                    },\n                },\n            });\n\n            const conf = {\n                fun() {\n                    called.fun = true;\n                },\n            };\n\n            assert.deepStrictEqual(s.benchmarks, []);\n            s.add(conf);\n            assert(s.benchmarks.length === 1);\n\n            assert(called.fun === false);\n            await s.benchmarks[0].fun();\n            assert(called.fun === true);\n\n            assert(called.after === false);\n            await s.benchmarks[0].after();\n            assert(called.after === true);\n        });\n\n        it('object with override default', async function() {\n            const called = {\n                original: false,\n                overrided: false,\n            };\n            const s = new Suite({\n                benchmarkDefault: {\n                    after() {\n                        called.original = true;\n                    },\n                },\n            });\n\n            const conf = {\n                after() {\n                    called.overrided = true;\n                },\n            };\n\n            assert.deepStrictEqual(s.benchmarks, []);\n            s.add(conf);\n            assert(s.benchmarks.length === 1);\n\n            assert(called.original === false);\n            assert(called.overrided === false);\n            await s.benchmarks[0].after();\n            assert(called.original === false);\n            assert(called.overrided === true);\n        });\n    });\n\n    /**\n     * @test {Suite#run}\n     */\n    describe('#run', function() {\n        describe('call methods order', function() {\n            it('empty tests', async function() {\n                const callLog = [];\n\n                const s = new Suite({\n                    before() {\n                        callLog.push('before');\n                    },\n                    beforeEach() {\n                        callLog.push('beforeEach');\n                    },\n                    beforeTest() {\n                        callLog.push('beforeTest');\n                    },\n                    afterTest() {\n                        callLog.push('afterTest');\n                    },\n                    afterEach() {\n                        callLog.push('afterEach');\n                    },\n                    after() {\n                        callLog.push('after');\n                    },\n                });\n\n                assert.deepStrictEqual(callLog, []);\n\n                await s.run();\n\n                assert.deepStrictEqual(callLog, [\n                    'before',\n                    'after',\n                ]);\n            });\n\n            it('empty tests (enabled parallel)', async function() {\n                const callLog = [];\n\n                const s = new Suite({\n                    before() {\n                        callLog.push('before');\n                    },\n                    beforeEach() {\n                        callLog.push('beforeEach');\n                    },\n                    beforeTest() {\n                        callLog.push('beforeTest');\n                    },\n                    afterTest() {\n                        callLog.push('afterTest');\n                    },\n                    afterEach() {\n                        callLog.push('afterEach');\n                    },\n                    after() {\n                        callLog.push('after');\n                    },\n                    parallel: true,\n                });\n\n                assert.deepStrictEqual(callLog, []);\n\n                await s.run();\n\n                assert.deepStrictEqual(callLog, [\n                    'before',\n                    'after',\n                ]);\n            });\n\n            it('with test', async function() {\n                const callLog = [];\n\n                const s = new Suite({\n                    before() {\n                        callLog.push('before');\n                    },\n                    beforeEach() {\n                        callLog.push('beforeEach');\n                    },\n                    beforeTest() {\n                        callLog.push('beforeTest');\n                    },\n                    afterTest() {\n                        callLog.push('afterTest');\n                    },\n                    afterEach() {\n                        callLog.push('afterEach');\n                    },\n                    after() {\n                        callLog.push('after');\n                    },\n                    benchmarkDefault: {\n                        after() {},\n                    },\n                });\n\n                s.add({\n                    number: 2,\n                    fun() {\n                        callLog.push('bench1');\n                    },\n                });\n\n                s.add({\n                    number: 3,\n                    fun() {\n                        callLog.push('bench2');\n                    },\n                });\n\n                assert.deepStrictEqual(callLog, []);\n\n                await (new Suite({\n                    beforeTest() {\n                        callLog.push('beforeTest parent');\n                    },\n                    afterTest() {\n                        callLog.push('afterTest parent');\n                    },\n                })).add(s).run();\n\n                assert.deepStrictEqual(callLog, [\n                    'before',\n\n                    'beforeEach',\n\n                    'beforeTest parent',\n                    'beforeTest',\n                    'bench1',\n                    'afterTest',\n                    'afterTest parent',\n\n                    'beforeTest parent',\n                    'beforeTest',\n                    'bench1',\n                    'afterTest',\n                    'afterTest parent',\n\n                    'afterEach',\n\n                    'beforeEach',\n\n                    'beforeTest parent',\n                    'beforeTest',\n                    'bench2',\n                    'afterTest',\n                    'afterTest parent',\n\n                    'beforeTest parent',\n                    'beforeTest',\n                    'bench2',\n                    'afterTest',\n                    'afterTest parent',\n\n                    'beforeTest parent',\n                    'beforeTest',\n                    'bench2',\n                    'afterTest',\n                    'afterTest parent',\n\n                    'afterEach',\n\n                    'after',\n                ]);\n            });\n\n            it('with test (enabled parallel)', async function() {\n                const callLog = [];\n\n                const s = new Suite({\n                    before() {\n                        callLog.push('before');\n                    },\n                    beforeEach() {\n                        callLog.push('beforeEach');\n                    },\n                    beforeTest() {\n                        callLog.push('beforeTest');\n                    },\n                    afterTest() {\n                        callLog.push('afterTest');\n                    },\n                    afterEach() {\n                        callLog.push('afterEach');\n                    },\n                    after() {\n                        callLog.push('after');\n                    },\n                    benchmarkDefault: {\n                        after() {},\n                    },\n                    parallel: true,\n                });\n\n                s.add({\n                    number: 2,\n                    fun() {\n                        callLog.push('bench1');\n                    },\n                });\n\n                s.add({\n                    number: 3,\n                    fun() {\n                        callLog.push('bench2');\n                    },\n                });\n\n                assert.deepStrictEqual(callLog, []);\n\n                await s.run();\n\n                assert(callLog.length === 21);\n\n                assert(callLog[0] === 'before');\n                assert(callLog[1] === 'beforeEach');\n                assert(callLog[callLog.length - 2] === 'afterEach');\n                assert(callLog[callLog.length - 1] === 'after');\n\n                assert(callLog.filter(x => x === 'bench1').length === 2);\n                assert(callLog.filter(x => x === 'bench2').length === 3);\n                assert(callLog.filter(x => x === 'beforeEach').length === 2);\n                assert(callLog.filter(x => x === 'afterEach').length === 2);\n                assert(callLog.filter(x => x === 'beforeTest').length === 5);\n                assert(callLog.filter(x => x === 'afterTest').length === 5);\n            });\n        });\n\n        const contextTest = async function(options) {\n            options.__proto__ = {\n                before() {\n                    assert(this.inOuter === undefined);\n                    assert(this.inInner === undefined);\n                    assert(this.inBench === undefined);\n                    assert(this.outInner === undefined);\n                    assert(this.outOuter === undefined);\n\n                    this.inOuter = 123;\n                },\n                beforeEach() {\n                    assert(this.inOuter === 123);\n                    assert(this.inInner === undefined);\n                    assert(this.inBench === undefined);\n                    assert(this.outInner === undefined);\n                    assert(this.outOuter === undefined);\n\n                    this.inInner = 'abc';\n                },\n                afterEach() {\n                    assert(this.inOuter === 123);\n                    assert(this.inInner === 'abc');\n                    assert(this.inBench === undefined);\n                    assert(this.outInner === undefined);\n                    assert(this.outOuter === undefined);\n\n                    this.outInner = 'cba';\n                },\n                after() {\n                    assert(this.inOuter === 123);\n                    assert(this.inInner === undefined);\n                    assert(this.inBench === undefined);\n                    assert(this.outInner === undefined);\n                    assert(this.outOuter === undefined);\n\n                    this.outOuter = 321;\n                },\n                benchmarkDefault: {\n                    fun() {},\n                },\n            };\n\n            const s = new Suite(options);\n\n            s.add({\n                number: 2,\n                before() {\n                    assert(this.inOuter === 123);\n                    assert(this.inInner === 'abc');\n                    assert(this.inBench === undefined);\n                    assert(this.outInner === undefined);\n                    assert(this.outOuter === undefined);\n\n                    this.inBench = 42;\n                },\n                after() {\n                    assert(this.inOuter === 123);\n                    assert(this.inInner === 'abc');\n                    assert(this.inBench === 42);\n                    assert(this.outInner === undefined);\n                    assert(this.outOuter === undefined);\n                },\n            });\n\n            s.add({\n                number: 3,\n                before() {\n                    assert(this.inOuter === 123);\n                    assert(this.inInner === 'abc');\n                    assert(this.inBench === undefined);\n                    assert(this.outInner === undefined);\n                    assert(this.outOuter === undefined);\n\n                    this.inBench = 24;\n                },\n                after() {\n                    assert(this.inOuter === 123);\n                    assert(this.inInner === 'abc');\n                    assert(this.inBench === 24);\n                    assert(this.outInner === undefined);\n                    assert(this.outOuter === undefined);\n                },\n            });\n\n            await s.run();\n        };\n\n        it('context handling', function() {\n            return contextTest({parallel: false});\n        });\n\n        it('context handling (enabled parallel)', function() {\n            return contextTest({parallel: true});\n        });\n\n        const argumentsTest = async function(options) {\n            const beforeCounts = [];\n            const afterCounts = [];\n            const results = [];\n            const beforeTestCounts = [];\n            const afterTestCounts = [];\n\n            options.__proto__ = {\n                before() {\n                    assert(arguments.length === 0);\n                },\n                beforeEach(count, benchmark) {\n                    assert(arguments.length === 2);\n\n                    assert(typeof count === 'number');\n                    beforeCounts.push(count);\n\n                    assert(benchmark instanceof Benchmark);\n                },\n                beforeTest(suiteCount, benchCount, benchmark) {\n                    assert(arguments.length === 3);\n\n                    assert(typeof suiteCount === 'number');\n                    assert(typeof benchCount === 'number');\n                    assert(benchmark instanceof Benchmark);\n\n                    beforeTestCounts.push([benchmark.name, suiteCount, benchCount]);\n                },\n                afterTest(suiteCount, benchCount, benchmark, msec) {\n                    assert(arguments.length === 4);\n\n                    assert(typeof suiteCount === 'number');\n                    assert(typeof benchCount === 'number');\n                    assert(benchmark instanceof Benchmark);\n\n                    afterTestCounts.push([benchmark.name, suiteCount, benchCount]);\n\n                    assert(typeof msec === 'number');\n                    assert(msec < 1);\n                },\n                afterEach(count, benchmark, result) {\n                    assert(arguments.length === 3);\n\n                    assert(typeof count === 'number');\n                    afterCounts.push(count);\n\n                    assert(benchmark instanceof Benchmark);\n\n                    assert(result instanceof Result);\n                    results.push(result);\n                },\n                after(rs) {\n                    assert(arguments.length === 1);\n\n                    assert(rs[0].msecs.length === 2);\n                    assert(rs[1].msecs.length === 3);\n\n                    rs.forEach((x, i) => {\n                        assert(x instanceof Result);\n                        assert.deepStrictEqual(results[i].msecs, x.msecs);\n                    });\n                },\n                benchmarkDefault: {\n                    fun() {},\n                    after() {},\n                },\n            };\n\n            const s = new Suite(options);\n\n            s.add({name: 'a', number: 2});\n            s.add({name: 'b', number: 3});\n\n            const rs = await s.run();\n            assert(rs[0].msecs.length === 2);\n            assert(rs[1].msecs.length === 3);\n            rs.forEach((x, i) => {\n                assert(x instanceof Result);\n                assert.deepStrictEqual(results[i].msecs, x.msecs);\n            });\n\n            assert.deepStrictEqual(beforeCounts, [0, 1]);\n            assert.deepStrictEqual(afterCounts, [0, 1]);\n\n            beforeTestCounts.sort((x, y) => (x[1] - y[1]) * 10 + (x[2] - y[2]));\n            afterTestCounts.sort((x, y) => (x[1] - y[1]) * 10 + (x[2] - y[2]));\n            assert.deepStrictEqual(beforeTestCounts, [['a', 0, 0], ['a', 0, 1], ['b', 1, 0], ['b', 1, 1], ['b', 1, 2]]);\n            assert.deepStrictEqual(afterTestCounts,  [['a', 0, 0], ['a', 0, 1], ['b', 1, 0], ['b', 1, 1], ['b', 1, 2]]);\n        };\n\n        it('arguments for methods', function() {\n            return argumentsTest({parallel: false});\n        });\n\n        it('arguments for methods (enabled parallel)', function() {\n            return argumentsTest({parallel: true});\n        });\n    });\n});\n",
    "static": true,
    "longname": "/mnt/tmpfs/AsyncMark/test/suite.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 97,
    "kind": "test",
    "name": "describe45",
    "testId": 45,
    "memberof": "test/suite.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/suite.js~describe45",
    "access": null,
    "description": "Suite",
    "lineNumber": 9,
    "testTargets": [
      "Suite"
    ]
  },
  {
    "__docId__": 98,
    "kind": "test",
    "name": "describe46",
    "testId": 46,
    "memberof": "test/suite.js~describe45",
    "testDepth": 1,
    "static": true,
    "longname": "test/suite.js~describe45.describe46",
    "access": null,
    "description": "#constructor",
    "lineNumber": 10
  },
  {
    "__docId__": 99,
    "kind": "test",
    "name": "it47",
    "testId": 47,
    "memberof": "test/suite.js~describe45.describe46",
    "testDepth": 2,
    "static": true,
    "longname": "test/suite.js~describe45.describe46.it47",
    "access": null,
    "description": "default values",
    "lineNumber": 11
  },
  {
    "__docId__": 100,
    "kind": "test",
    "name": "it48",
    "testId": 48,
    "memberof": "test/suite.js~describe45.describe46",
    "testDepth": 2,
    "static": true,
    "longname": "test/suite.js~describe45.describe46.it48",
    "access": null,
    "description": "options",
    "lineNumber": 19
  },
  {
    "__docId__": 101,
    "kind": "test",
    "name": "it49",
    "testId": 49,
    "memberof": "test/suite.js~describe45.describe46",
    "testDepth": 2,
    "static": true,
    "longname": "test/suite.js~describe45.describe46.it49",
    "access": null,
    "description": "functions",
    "lineNumber": 34
  },
  {
    "__docId__": 102,
    "kind": "test",
    "name": "it50",
    "testId": 50,
    "memberof": "test/suite.js~describe45",
    "testDepth": 1,
    "static": true,
    "longname": "test/suite.js~describe45.it50",
    "access": null,
    "description": "#addBenchmark",
    "lineNumber": 80,
    "testTargets": [
      "Suite#addBenchmark"
    ]
  },
  {
    "__docId__": 103,
    "kind": "test",
    "name": "it51",
    "testId": 51,
    "memberof": "test/suite.js~describe45",
    "testDepth": 1,
    "static": true,
    "longname": "test/suite.js~describe45.it51",
    "access": null,
    "description": "#addSuite",
    "lineNumber": 98,
    "testTargets": [
      "Suite#addSuite"
    ]
  },
  {
    "__docId__": 104,
    "kind": "test",
    "name": "describe52",
    "testId": 52,
    "memberof": "test/suite.js~describe45",
    "testDepth": 1,
    "static": true,
    "longname": "test/suite.js~describe45.describe52",
    "access": null,
    "description": "#add",
    "lineNumber": 117,
    "testTargets": [
      "Suite#add"
    ]
  },
  {
    "__docId__": 105,
    "kind": "test",
    "name": "it53",
    "testId": 53,
    "memberof": "test/suite.js~describe45.describe52",
    "testDepth": 2,
    "static": true,
    "longname": "test/suite.js~describe45.describe52.it53",
    "access": null,
    "description": "Benchmark",
    "lineNumber": 118
  },
  {
    "__docId__": 106,
    "kind": "test",
    "name": "it54",
    "testId": 54,
    "memberof": "test/suite.js~describe45.describe52",
    "testDepth": 2,
    "static": true,
    "longname": "test/suite.js~describe45.describe52.it54",
    "access": null,
    "description": "Suite",
    "lineNumber": 129
  },
  {
    "__docId__": 107,
    "kind": "test",
    "name": "it55",
    "testId": 55,
    "memberof": "test/suite.js~describe45.describe52",
    "testDepth": 2,
    "static": true,
    "longname": "test/suite.js~describe45.describe52.it55",
    "access": null,
    "description": "function",
    "lineNumber": 142
  },
  {
    "__docId__": 108,
    "kind": "test",
    "name": "it56",
    "testId": 56,
    "memberof": "test/suite.js~describe45.describe52",
    "testDepth": 2,
    "static": true,
    "longname": "test/suite.js~describe45.describe52.it56",
    "access": null,
    "description": "function with override default",
    "lineNumber": 171
  },
  {
    "__docId__": 109,
    "kind": "test",
    "name": "it57",
    "testId": 57,
    "memberof": "test/suite.js~describe45.describe52",
    "testDepth": 2,
    "static": true,
    "longname": "test/suite.js~describe45.describe52.it57",
    "access": null,
    "description": "object",
    "lineNumber": 201
  },
  {
    "__docId__": 110,
    "kind": "test",
    "name": "it58",
    "testId": 58,
    "memberof": "test/suite.js~describe45.describe52",
    "testDepth": 2,
    "static": true,
    "longname": "test/suite.js~describe45.describe52.it58",
    "access": null,
    "description": "object with override default",
    "lineNumber": 233
  },
  {
    "__docId__": 111,
    "kind": "test",
    "name": "describe59",
    "testId": 59,
    "memberof": "test/suite.js~describe45",
    "testDepth": 1,
    "static": true,
    "longname": "test/suite.js~describe45.describe59",
    "access": null,
    "description": "#run",
    "lineNumber": 267,
    "testTargets": [
      "Suite#run"
    ]
  },
  {
    "__docId__": 112,
    "kind": "test",
    "name": "describe60",
    "testId": 60,
    "memberof": "test/suite.js~describe45.describe59",
    "testDepth": 2,
    "static": true,
    "longname": "test/suite.js~describe45.describe59.describe60",
    "access": null,
    "description": "call methods order",
    "lineNumber": 268
  },
  {
    "__docId__": 113,
    "kind": "test",
    "name": "it61",
    "testId": 61,
    "memberof": "test/suite.js~describe45.describe59.describe60",
    "testDepth": 3,
    "static": true,
    "longname": "test/suite.js~describe45.describe59.describe60.it61",
    "access": null,
    "description": "empty tests",
    "lineNumber": 269
  },
  {
    "__docId__": 114,
    "kind": "test",
    "name": "it62",
    "testId": 62,
    "memberof": "test/suite.js~describe45.describe59.describe60",
    "testDepth": 3,
    "static": true,
    "longname": "test/suite.js~describe45.describe59.describe60.it62",
    "access": null,
    "description": "empty tests (enabled parallel)",
    "lineNumber": 303
  },
  {
    "__docId__": 115,
    "kind": "test",
    "name": "it63",
    "testId": 63,
    "memberof": "test/suite.js~describe45.describe59.describe60",
    "testDepth": 3,
    "static": true,
    "longname": "test/suite.js~describe45.describe59.describe60.it63",
    "access": null,
    "description": "with test",
    "lineNumber": 338
  },
  {
    "__docId__": 116,
    "kind": "test",
    "name": "it64",
    "testId": 64,
    "memberof": "test/suite.js~describe45.describe59.describe60",
    "testDepth": 3,
    "static": true,
    "longname": "test/suite.js~describe45.describe59.describe60.it64",
    "access": null,
    "description": "with test (enabled parallel)",
    "lineNumber": 435
  },
  {
    "__docId__": 117,
    "kind": "test",
    "name": "it65",
    "testId": 65,
    "memberof": "test/suite.js~describe45.describe59",
    "testDepth": 2,
    "static": true,
    "longname": "test/suite.js~describe45.describe59.it65",
    "access": null,
    "description": "context handling",
    "lineNumber": 585
  },
  {
    "__docId__": 118,
    "kind": "test",
    "name": "it66",
    "testId": 66,
    "memberof": "test/suite.js~describe45.describe59",
    "testDepth": 2,
    "static": true,
    "longname": "test/suite.js~describe45.describe59.it66",
    "access": null,
    "description": "context handling (enabled parallel)",
    "lineNumber": 589
  },
  {
    "__docId__": 119,
    "kind": "test",
    "name": "it67",
    "testId": 67,
    "memberof": "test/suite.js~describe45.describe59",
    "testDepth": 2,
    "static": true,
    "longname": "test/suite.js~describe45.describe59.it67",
    "access": null,
    "description": "arguments for methods",
    "lineNumber": 683
  },
  {
    "__docId__": 120,
    "kind": "test",
    "name": "it68",
    "testId": 68,
    "memberof": "test/suite.js~describe45.describe59",
    "testDepth": 2,
    "static": true,
    "longname": "test/suite.js~describe45.describe59.it68",
    "access": null,
    "description": "arguments for methods (enabled parallel)",
    "lineNumber": 687
  },
  {
    "__docId__": 121,
    "kind": "testFile",
    "name": "test/timer.js",
    "content": "import assert from 'power-assert';\n\nimport {timeit} from '../src';\nimport {now, now_date, now_now, now_hrtime} from '../src/timer.js';\n\n\ndescribe('timer', function() {\n    /**\n     * @test {timeit}\n     */\n    describe('timeit', function() {\n        it('measure', async function() {\n            let sum = 0;\n            for (let i=0; i<5; i++) {\n                sum += await timeit(function() {\n                    return new Promise((resolve, reject) => setTimeout(resolve, 42));\n                });\n            }\n            assert(Math.abs(sum/5 - 42) <= 3);\n        });\n        it('use context', async function() {\n            const ctx = {\n                count: 0,\n            };\n            for (let i=0; i<5; i++) {\n                await timeit(function() {\n                    this.count++;\n                    this.count2 = i;\n                }, ctx);\n                assert(ctx.count === i+1);\n                assert(ctx.count2 === i);\n            }\n        });\n        it('context sandboxing', async function() {\n            function f() {\n                assert(this.x === undefined);\n                this.x = 'foobar';\n                assert(this.x === 'foobar');\n            }\n\n            await timeit(f);\n            await timeit(f);\n        });\n        it('arguments', async function() {\n            const ctx = {};\n            function f(x, y) {\n                this.result = x + y;\n            }\n\n            await timeit(f, ctx, [11, 22])\n            assert(ctx.result === 33);\n\n            await timeit(f, ctx, [42, 84])\n            assert(ctx.result === 126);\n        });\n    });\n\n    /**\n     * @ignore\n     */\n    describe('timer function', function() {\n        const global = new Function('return this')();\n\n        function checkTimer(func, resolution) {\n            return function() {\n                assert(typeof func() === 'number');\n\n                const a = func();\n                const b = func();\n                assert(a <= b);\n                assert(b - a <= resolution);\n            };\n        }\n\n        /**\n         * @test {now}\n         */\n        it('now', checkTimer(now, 1e-2));\n\n        /**\n         * @test {now_date}\n         */\n        it('now_date', checkTimer(now_date, 1e-2));\n\n        /**\n         * @test {now_now}\n         */\n        describe('now_now', function() {\n            (typeof performance !== 'undefined' && performance.now ? it : it.skip)('simple execute', checkTimer(now_now, 1e-2));\n\n            it('with dummy function', function() {\n                const backup = global.performance;\n                try {\n                    global.performance = {now: () => 123.456};\n                    assert(now_now() === 123.456);\n                } finally {\n                    global.performance = backup;\n                }\n            });\n        });\n\n        /**\n         * @test {now_hrtime}\n         */\n        describe('now_hrtime', function() {\n            (typeof process !== 'undefined' && process.hrtime ? it : it.skip)('simple execute', checkTimer(now_hrtime, 1e-2));\n\n            it('with dummy function', function() {\n                const backup = global.process;\n                try {\n                    global.process = {hrtime: () => [123, 456]};\n                    assert(now_hrtime() === 123e3 + 456e-6);\n                } finally {\n                    global.process = backup;\n                }\n            });\n        });\n    });\n});\n",
    "static": true,
    "longname": "/mnt/tmpfs/AsyncMark/test/timer.js",
    "access": null,
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 122,
    "kind": "test",
    "name": "describe69",
    "testId": 69,
    "memberof": "test/timer.js",
    "testDepth": 0,
    "static": true,
    "longname": "test/timer.js~describe69",
    "access": null,
    "description": "timer",
    "lineNumber": 7
  },
  {
    "__docId__": 123,
    "kind": "test",
    "name": "describe70",
    "testId": 70,
    "memberof": "test/timer.js~describe69",
    "testDepth": 1,
    "static": true,
    "longname": "test/timer.js~describe69.describe70",
    "access": null,
    "description": "timeit",
    "lineNumber": 11,
    "testTargets": [
      "timeit"
    ]
  },
  {
    "__docId__": 124,
    "kind": "test",
    "name": "it71",
    "testId": 71,
    "memberof": "test/timer.js~describe69.describe70",
    "testDepth": 2,
    "static": true,
    "longname": "test/timer.js~describe69.describe70.it71",
    "access": null,
    "description": "measure",
    "lineNumber": 12
  },
  {
    "__docId__": 125,
    "kind": "test",
    "name": "it72",
    "testId": 72,
    "memberof": "test/timer.js~describe69.describe70",
    "testDepth": 2,
    "static": true,
    "longname": "test/timer.js~describe69.describe70.it72",
    "access": null,
    "description": "use context",
    "lineNumber": 21
  },
  {
    "__docId__": 126,
    "kind": "test",
    "name": "it73",
    "testId": 73,
    "memberof": "test/timer.js~describe69.describe70",
    "testDepth": 2,
    "static": true,
    "longname": "test/timer.js~describe69.describe70.it73",
    "access": null,
    "description": "context sandboxing",
    "lineNumber": 34
  },
  {
    "__docId__": 127,
    "kind": "test",
    "name": "it74",
    "testId": 74,
    "memberof": "test/timer.js~describe69.describe70",
    "testDepth": 2,
    "static": true,
    "longname": "test/timer.js~describe69.describe70.it74",
    "access": null,
    "description": "arguments",
    "lineNumber": 44
  },
  {
    "__docId__": 128,
    "kind": "test",
    "name": "describe75",
    "testId": 75,
    "memberof": "test/timer.js~describe69",
    "testDepth": 1,
    "static": true,
    "longname": "test/timer.js~describe69.describe75",
    "access": null,
    "description": "timer function",
    "lineNumber": 61,
    "ignore": true
  },
  {
    "__docId__": 129,
    "kind": "test",
    "name": "it76",
    "testId": 76,
    "memberof": "test/timer.js~describe69.describe75",
    "testDepth": 2,
    "static": true,
    "longname": "test/timer.js~describe69.describe75.it76",
    "access": null,
    "description": "now",
    "lineNumber": 78,
    "testTargets": [
      "now"
    ]
  },
  {
    "__docId__": 130,
    "kind": "test",
    "name": "it77",
    "testId": 77,
    "memberof": "test/timer.js~describe69.describe75",
    "testDepth": 2,
    "static": true,
    "longname": "test/timer.js~describe69.describe75.it77",
    "access": null,
    "description": "now_date",
    "lineNumber": 83,
    "testTargets": [
      "now_date"
    ]
  },
  {
    "__docId__": 131,
    "kind": "test",
    "name": "describe78",
    "testId": 78,
    "memberof": "test/timer.js~describe69.describe75",
    "testDepth": 2,
    "static": true,
    "longname": "test/timer.js~describe69.describe75.describe78",
    "access": null,
    "description": "now_now",
    "lineNumber": 88,
    "testTargets": [
      "now_now"
    ]
  },
  {
    "__docId__": 132,
    "kind": "test",
    "name": "it79",
    "testId": 79,
    "memberof": "test/timer.js~describe69.describe75.describe78",
    "testDepth": 3,
    "static": true,
    "longname": "test/timer.js~describe69.describe75.describe78.it79",
    "access": null,
    "description": "with dummy function",
    "lineNumber": 91
  },
  {
    "__docId__": 133,
    "kind": "test",
    "name": "describe80",
    "testId": 80,
    "memberof": "test/timer.js~describe69.describe75",
    "testDepth": 2,
    "static": true,
    "longname": "test/timer.js~describe69.describe75.describe80",
    "access": null,
    "description": "now_hrtime",
    "lineNumber": 105,
    "testTargets": [
      "now_hrtime"
    ]
  },
  {
    "__docId__": 134,
    "kind": "test",
    "name": "it81",
    "testId": 81,
    "memberof": "test/timer.js~describe69.describe75.describe80",
    "testDepth": 3,
    "static": true,
    "longname": "test/timer.js~describe69.describe75.describe80.it81",
    "access": null,
    "description": "with dummy function",
    "lineNumber": 108
  }
]