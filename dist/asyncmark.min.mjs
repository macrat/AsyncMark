class e{constructor(e,t){this.name=e,this.msecs=t}get total(){return this.msecs.reduce((e,t)=>e+t)}get fastest(){return this.msecs.reduce((e,t)=>Math.min(e,t))}get slowest(){return this.msecs.reduce((e,t)=>Math.max(e,t))}get average(){return this.total/this.msecs.length}get variance(){const e=this.average;return this.msecs.map(t=>Math.pow(t-e,2)).reduce((e,t)=>e+t)/(this.msecs.length-1)}get std(){return Math.sqrt(this.variance)}get sem(){return this.std/Math.sqrt(this.msecs.length)}get errorRange(){return 1.96*this.sem}get errorRate(){return this.errorRange/this.average}get opsPerSec(){return 1e3/this.average}dropOutlier(t=2){const a=this.average,s=this.std;return new e(this.name,this.msecs.filter(e=>Math.abs((e-a)/s)<=t))}toString(){const e=Math.round(1e4*this.average)/1e4,t=Math.round(1e3*this.opsPerSec)/1e3,a=Math.round(1e4*this.errorRange)/1e4,s=Math.round(1e4*this.errorRate)/100;return`${this.name}:\t${t}ops/sec\t${e}msec/op\t+-${a}msec/op (${s}%)\t${this.msecs.length} times tried`}}let t=function(){return Number(new Date)};if("undefined"!=typeof performance&&performance.now)t=function(){return performance.now()};else try{const e=require("microtime");t=function(){return 1e3*e.nowDouble()}}catch(e){"undefined"!=typeof process&&process.hrtime&&(t=function(){const e=process.hrtime();return(1e9*e[0]+e[1])/1e6})}async function a(e,a={}){const s=t();return await e.call(a),t()-s}class s{constructor(e={}){this.name=e.name||"unnamed",this.targetErrorRate=e.targetErrorRate||.1,this.maxNumber=e.maxNumber||1e4,this.minNumber=e.minNumber||30,this.number=e.number||null,"function"==typeof e?this.fun=e:(this.before=e.before||this.before,this.beforeEach=e.beforeEach||this.beforeEach,this.fun=e.fun||this.fun,this.afterEach=e.afterEach||this.afterEach,this.after=e.after||this.after)}async before(){}async beforeEach(e){}async fun(){throw new Error("target function is not defined")}async afterEach(e,t){}async after(e){console.log(String(e.dropOutlier()))}async run(t={},s={}){(t=Object.assign({},t)).__proto__=this,await this.before.call(t);const r=this.number||this.maxNumber,n=[];for(let i=0;i<r;i++){const r=Object.assign({},t);s.beforeTest&&await s.beforeTest.call(r,i,this),await this.beforeEach.call(r,i);const h=await a(this.fun,r);if(n.push(h),await this.afterEach.call(r,i,h),s.afterTest&&await s.afterTest.call(r,i,this,h),!this.number&&i+1>=this.minNumber&&new e(this.name,n).errorRate<=this.targetErrorRate)break}const i=new e(this.name,n);return await this.after.call(t,i),i}}class r{constructor(e={}){this.name=e.name||"unnamed",this.benchmarkDefault=e.benchmarkDefault||{},this.benchmarks=[],this.parallel=e.parallel||!1,this.before=e.before||this.before,this.beforeEach=e.beforeEach||this.beforeEach,this.beforeTest=e.beforeTest||this.beforeTest,this.afterTest=e.afterTest||this.afterTest,this.afterEach=e.afterEach||this.afterEach,this.after=e.after||this.after}async before(){}async beforeEach(e,t){}async beforeTest(e,t,a){}async afterTest(e,t,a,s){}async afterEach(e,t,a){}async after(e){}addBenchmark(e){return this.benchmarks.push(e),this}addSuite(e){return this.benchmarks.push(e),this}add(e){if(e instanceof s)this.addBenchmark(e);else if(e instanceof r)this.addSuite(e);else if("function"==typeof e){const t={fun:e};t.__proto__=this.benchmarkDefault,this.addBenchmark(new s(t))}else{const t=Object.assign({},e);t.__proto__=this.benchmarkDefault,this.addBenchmark(new s(t))}return this}_makeCallbacks(e,t){const a=this;return{beforeTest(s,r){t.beforeTest&&t.beforeTest.call(this,s,r),a.beforeTest.call(this,e,s,r)},afterTest(s,r,n){a.afterTest.call(this,e,s,r,n),t.afterTest&&t.afterTest.call(this,s,r,n)}}}async _runParallel(e,t){await this.before.call(e);const a=await Promise.all(this.benchmarks.map(async(a,s)=>{const r=Object.assign({},e);await this.beforeEach.call(r,s,a);const n=await a.run(r,this._makeCallbacks(s,t));return await this.afterEach.call(r,s,a,n),n}));return await this.after.call(e,a),a}async _runSequential(e,t){await this.before.call(e);const a=[];for(let s=0;s<this.benchmarks.length;s++){const r=this.benchmarks[s],n=Object.assign({},e);await this.beforeEach.call(n,s,r);const i=await r.run(n,this._makeCallbacks(s,t));a.push(i),await this.afterEach.call(n,s,r,i)}return await this.after.call(e,a),a}async run(e={},t={}){return(e=Object.assign({},e)).__proto__=this,this.parallel?await this._runParallel(e,t):await this._runSequential(e,t)}}export default s;export{s as Benchmark,e as Result,r as Suite,a as timeit};
