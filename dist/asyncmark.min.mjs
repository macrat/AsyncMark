import e from"assert";class t{constructor(e){const t=String(e).match(/^(|[<>]=?)(\d+(?:\.\d+)?)(|s|ms|us|ns|sec|msec|usec|nsec)$/);if(null===t)throw Error(`Invalid rule format: "${e}"`);this.operator=t[1]||"<=",this.expected=Number(t[2])*function(e){switch(e){case"s":case"sec":return 1e3;case"":case"ms":case"msec":return 1;case"us":case"usec":return.001;case"ns":case"nsec":return 1e-6;default:throw Error(`unknown unit name: "${e}"`)}}(t[3])}check(e){return{"<":e=>e<this.expected,"<=":e=>e<=this.expected,">":e=>e>this.expected,">=":e=>e>=this.expected}[this.operator](e)}assert(t,s=null){if(!this.check(t.average))throw void 0===e?new Error(`benchmark "${t.name}": actual:${t.average}msec/op ${this.operator} expected:${this.expected}msec/op`):new e.AssertionError({message:`benchmark "${t.name}": actual:${t.average}msec/op ${this.operator} expected:${this.expected}msec/op`,actual:`${t.average} msec/op`,expected:`${this.expected} msec/op`,operator:this.operator,stackStartFn:s||this.assert})}}class s{constructor(e,t){this.name=e,this.msecs=t}get total(){return this.msecs.reduce((e,t)=>e+t)}get fastest(){return this.msecs.reduce((e,t)=>Math.min(e,t))}get slowest(){return this.msecs.reduce((e,t)=>Math.max(e,t))}get average(){return this.total/this.msecs.length}get variance(){const e=this.average;return this.msecs.map(t=>Math.pow(t-e,2)).reduce((e,t)=>e+t)/(this.msecs.length-1)}get std(){return Math.sqrt(this.variance)}get sem(){return this.std/Math.sqrt(this.msecs.length)}get errorRange(){return 1.96*this.sem}get errorRate(){return this.errorRange/this.average}get opsPerSec(){return 1e3/this.average}dropOutlier(e=2){const t=this.average,a=this.std;return new s(this.name,this.msecs.filter(s=>Math.abs((s-t)/a)<=e))}toString(){const e=Math.round(1e4*this.average)/1e4,t=Math.round(1e3*this.opsPerSec)/1e3,s=Math.round(1e4*this.errorRange)/1e4,a=Math.round(1e4*this.errorRate)/100;return`${this.name}:\t${t}ops/sec\t${e}msec/op\t+-${s}msec/op (${a}%)\t${this.msecs.length} times tried`}assert(...e){e.map(e=>new t(e)).forEach(e=>e.assert(this,this.assert))}}let a=function(){return Number(new Date)};async function r(e,t={},s=[]){const r=a();return await e.call(t,...s),a()-r}"undefined"!=typeof process&&process.hrtime?a=function(){const e=process.hrtime();return(1e9*e[0]+e[1])/1e6}:"undefined"!=typeof performance&&performance.now&&(a=function(){return performance.now()});class n{constructor(e={}){this.name=e.name||"unnamed",this.targetErrorRate=e.targetErrorRate||.1,this.maxNumber=e.maxNumber||1e4,this.minNumber=e.minNumber||30,this.number=e.number||null,"function"==typeof e?this.fun=e:(this.before=e.before||this.before,this.beforeEach=e.beforeEach||this.beforeEach,this.fun=e.fun||this.fun,this.afterEach=e.afterEach||this.afterEach,this.after=e.after||this.after)}async before(){}async beforeEach(e){}async fun(){throw new Error("target function is not defined")}async afterEach(e,t){}async after(e){console.log(String(e.dropOutlier()))}async run(e={},t={}){(e=Object.assign({},e)).__proto__=this,await this.before.call(e);const a=this.number||this.maxNumber,n=[];for(let i=0;i<a;i++){const a=Object.assign({},e);t.beforeTest&&await t.beforeTest.call(a,i,this),await this.beforeEach.call(a,i);const c=await r(this.fun,a);if(n.push(c),await this.afterEach.call(a,i,c),t.afterTest&&await t.afterTest.call(a,i,this,c),!this.number&&i+1>=this.minNumber&&new s(this.name,n).errorRate<=this.targetErrorRate)break}const i=new s(this.name,n);return await this.after.call(e,i),i}}class i{constructor(e={}){this.name=e.name||"unnamed",this.benchmarkDefault=e.benchmarkDefault||{},this.benchmarks=[],this.parallel=e.parallel||!1,this.before=e.before||this.before,this.beforeEach=e.beforeEach||this.beforeEach,this.beforeTest=e.beforeTest||this.beforeTest,this.afterTest=e.afterTest||this.afterTest,this.afterEach=e.afterEach||this.afterEach,this.after=e.after||this.after}async before(){}async beforeEach(e,t){}async beforeTest(e,t,s){}async afterTest(e,t,s,a){}async afterEach(e,t,s){}async after(e){}addBenchmark(e){return this.benchmarks.push(e),this}addSuite(e){return this.benchmarks.push(e),this}add(e){if(e instanceof n)this.addBenchmark(e);else if(e instanceof i)this.addSuite(e);else if("function"==typeof e){const t={fun:e};t.__proto__=this.benchmarkDefault,this.addBenchmark(new n(t))}else{const t=Object.assign({},e);t.__proto__=this.benchmarkDefault,this.addBenchmark(new n(t))}return this}_makeCallbacks(e,t){const s=this;return{beforeTest(a,r){t.beforeTest&&t.beforeTest.call(this,a,r),s.beforeTest.call(this,e,a,r)},afterTest(a,r,n){s.afterTest.call(this,e,a,r,n),t.afterTest&&t.afterTest.call(this,a,r,n)}}}async _runParallel(e,t){await this.before.call(e);const s=await Promise.all(this.benchmarks.map(async(s,a)=>{const r=Object.assign({},e);await this.beforeEach.call(r,a,s);const n=await s.run(r,this._makeCallbacks(a,t));return await this.afterEach.call(r,a,s,n),n}));return await this.after.call(e,s),s}async _runSequential(e,t){await this.before.call(e);const s=[];for(let a=0;a<this.benchmarks.length;a++){const r=this.benchmarks[a],n=Object.assign({},e);await this.beforeEach.call(n,a,r);const i=await r.run(n,this._makeCallbacks(a,t));s.push(i),await this.afterEach.call(n,a,r,i)}return await this.after.call(e,s),s}async run(e={},t={}){return(e=Object.assign({},e)).__proto__=this,this.parallel?await this._runParallel(e,t):await this._runSequential(e,t)}}export default n;export{n as Benchmark,s as Result,i as Suite,r as timeit};
